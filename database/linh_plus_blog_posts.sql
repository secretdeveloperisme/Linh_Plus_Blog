-- MySQL dump 10.13  Distrib 8.0.16, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: linh_plus_blog
-- ------------------------------------------------------
-- Server version	8.0.16

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
 SET NAMES utf8 ;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `posts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `slug` varchar(255) NOT NULL,
  `description` varchar(1000) DEFAULT NULL,
  `image` varchar(255) DEFAULT NULL,
  `content` text NOT NULL,
  `status_id` int(11) NOT NULL,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  `deletedAt` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `slug` (`slug`),
  KEY `user_id` (`user_id`),
  KEY `status_id` (`status_id`),
  FULLTEXT KEY `title` (`title`),
  CONSTRAINT `posts_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `posts_ibfk_2` FOREIGN KEY (`status_id`) REFERENCES `statuses` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (1,1,'Make your JavaScript Typed Safe','Make_your_JavaScript_Typed_Safe','','/images/posts/1/ks7pbf87480q9to0x6uk_342022T134250_3122022T153832.webp','<p>We are going to make our&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">JavaScript</code>&nbsp;files typed safe, that your JS files will feel like if they were typescript. this can be done for any JavaScript project, but we will focus on react.</p><p>I have a&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">create-react-app</code>&nbsp;project. let\'s add a&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">jsconfig.json</code>&nbsp;file in the root of the project</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wYKzlRgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aisfym76bb941dlz02mp.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wYKzlRgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aisfym76bb941dlz02mp.png\" alt=\"Image description\" height=\"590\" width=\"606\"></a></p><p>a jsconfig.json file is a&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">tsconfig.json</code>&nbsp;with the&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">allowJs</code>&nbsp;and the&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">checkJs</code>&nbsp;as true.</p><pre class=\"ql-syntax\" spellcheck=\"false\">{\r\n  \"compilerOptions\": {\r\n    \"incremental\": true,\r\n    \"target\": \"es2020\",\r\n    \"composite\": true,\r\n    \"module\": \"ESNext\",\r\n    \"lib\": [\r\n      \"DOM\",\r\n      \"esnext\",\r\n      \"ES2015\",\r\n      \"ES2016\",\r\n      \"ES2017\",\r\n      \"ES2018\",\r\n      \"ES2019\"\r\n    ],\r\n    \"allowJs\": true,\r\n    \"checkJs\": true,\r\n    \"jsx\": \"preserve\",\r\n    \"declaration\": true,\r\n    \"reactNamespace\": \"React\",\r\n    \"declarationMap\": true,\r\n    \"sourceMap\": true,\r\n    \"outDir\": \"typings\",\r\n    \"rootDir\": \".\",\r\n    \"tsBuildInfoFile\": \"./tsBuildInfoFile.json\",\r\n    \"isolatedModules\": true,\r\n    \"moduleResolution\": \"node\",\r\n    \"baseUrl\": \"./node_modules\",\r\n    \"importHelpers\": true,\r\n    \"noImplicitAny\": false,\r\n    \"resolveJsonModule\": true,\r\n    \"noImplicitReturns\": true,\r\n    \"alwaysStrict\": true,\r\n    \"assumeChangesOnlyAffectDirectDependencies\": true,\r\n    \"allowUnusedLabels\": false,\r\n    \"paths\": {\r\n      \"*\": [\r\n        \"./*\",\r\n        \"./@types/*\"\r\n      ]\r\n    },\r\n    \"types\": [\r\n      \"node\",\r\n      \"react\"\r\n    ],\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"esModuleInterop\": false,\r\n    \"traceResolution\": true,\r\n    \"skipLibCheck\": false,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"pretty\": true\r\n  },\r\n  \"typeAcquisition\": {\r\n    \"enable\": true\r\n  },\r\n  \"exclude\": [\r\n    \"node_modules\",\r\n  ],\r\n  \"include\": [\r\n    \"src\",\r\n    \"type\"\r\n  ]\r\n}\r\n</pre><p><br></p><p>Next you need to create a folder call&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">.vscode</code>&nbsp;and add a file inside it call&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">settings.json</code></p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5EQl0Qon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm0wq2ya0qd8bbnopppc.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5EQl0Qon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm0wq2ya0qd8bbnopppc.png\" alt=\"Image description\" height=\"852\" width=\"638\"></a></p><pre class=\"ql-syntax\" spellcheck=\"false\">{\r\n    \"javascript.suggestionActions.enabled\": true,\r\n  \"javascript.inlayHints.parameterNames\": \"all\",\r\n  \"javascript.inlayHints.variableTypes.enabled\": true,\r\n  \"javascript.inlayHints.parameterTypes.enabled\": true,\r\n  \"javascript.inlayHints.functionLikeReturnTypes.enabled\": true,\r\n  \"javascript.autoClosingTags\": true,\r\n  \"javascript.format.enable\": true,\r\n  \"javascript.format.insertSpaceAfterCommaDelimiter\": true,\r\n  \"javascript.format.insertSpaceAfterConstructor\": true,\r\n  \"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions\": true,\r\n  \"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements\": true,\r\n  \"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis\": false,\r\n  \"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\": true,\r\n  \"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces\": true,\r\n  \"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces\": true,\r\n  \"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces\": true,\r\n  \"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces\": true,\r\n  \"javascript.format.insertSpaceAfterSemicolonInForStatements\": true,\r\n  \"javascript.format.insertSpaceBeforeAndAfterBinaryOperators\": true,\r\n  \"javascript.format.insertSpaceBeforeFunctionParenthesis\": true,\r\n  \"javascript.format.placeOpenBraceOnNewLineForControlBlocks\": false,\r\n  \"javascript.format.placeOpenBraceOnNewLineForFunctions\": false,\r\n  \"javascript.format.semicolons\": \"insert\",\r\n  \"javascript.format.quoteStyle\": \"double\",\r\n  \"javascript.inlayHints.enumMemberValues.enabled\": true,\r\n  \"javascript.inlayHints.parameterNames.enabled\": \"all\",\r\n  \"javascript.inlayHints.propertyDeclarationTypes.enabled\": true,\r\n  \"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName\": true,\r\n  \"javascript.preferences.importModuleSpecifier\": \"shortest\",\r\n  \"javascript.preferences.importModuleSpecifierEnding\": \"auto\",\r\n  \"javascript.preferences.jsxAttributeCompletionStyle\": \"auto\",\r\n  \"javascript.preferences.quoteStyle\": \"double\",\r\n  \"javascript.preferences.useAliasesForRenames\": true,\r\n  \"javascript.referencesCodeLens.enabled\": true,\r\n  \"javascript.suggest.completeJSDocs\": true,\r\n}\r\n\r\n</pre><p><br></p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--49k39Rm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fiojoxt0wta1yj29vwy.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--49k39Rm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fiojoxt0wta1yj29vwy.png\" alt=\"Image description\" height=\"423\" width=\"880\"></a></p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--J0jsc1Y7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p30v5dwhbnifvmeo6l5.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--J0jsc1Y7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p30v5dwhbnifvmeo6l5.png\" alt=\"Image description\" height=\"1096\" width=\"880\"></a></p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HGvGvbyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2unpi378sm3mva1f5ce.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HGvGvbyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2unpi378sm3mva1f5ce.png\" alt=\"Image description\" height=\"813\" width=\"880\"></a></p><p><br></p>',1,'2022-03-12 08:38:32','2022-04-12 08:38:32',NULL),(2,1,'How to Undo Pushed Commits with Git','How_to_Undo_Pushed_Commits_with_Git','','/images/posts/1/civic-type-r_312022T145655_3122022T154318.jpg','<h2><a href=\"https://dev.to/blackgirlbytes/series/17601\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Intro to Git (2 Part Series)</a></h2><p><a href=\"https://dev.to/github/how-do-i-resolve-merge-conflicts-5438\" target=\"_blank\" style=\"color: var(--base-70);\">1</a></p><p><a href=\"https://dev.to/github/how-do-i-resolve-merge-conflicts-5438\" target=\"_blank\" style=\"color: var(--link-color);\">How Do I Resolve Merge Conflicts?</a></p><p><a href=\"https://dev.to/github/how-to-undo-pushed-commits-with-git-2pe6\" target=\"_blank\" style=\"color: var(--base-inverted);\">2</a></p><p><a href=\"https://dev.to/github/how-to-undo-pushed-commits-with-git-2pe6\" target=\"_blank\" style=\"color: var(--base-100);\">How to Undo Pushed Commits with Git</a></p><h2>Introduction</h2><p>One major benefit of version control is that you can roll back your code to any time in history without significantly disrupting your teammates. However, reverting your code isn’t always straightforward, especially when you’re still learning Git or gaining confidence navigating the command line. In this post, I will walk you through undoing a commit after you push your changes via the terminal.</p><p><em>Please note that this post\'s target audience includes students, early-career developers, or folks who have less experience reverting commits. Please refrain from adding discouraging comments critiquing those less experienced with version control. As software engineers, we have to remember that easy is relative, and there is a steep learning curve in tech. Some people may even have several years of experience, but still feel uncertain about reverting commits.</em></p><p>To follow along, you should already have:</p><ul><li>A GitHub account - If you don’t have one, you can find the&nbsp;<a href=\"https://docs.github.com/en/get-started/onboarding/getting-started-with-your-github-account\" target=\"_blank\" style=\"color: var(--link-branded-color);\">signup instructions here</a></li><li>Git installed on your computer - You can find the instructions to&nbsp;<a href=\"https://github.com/git-guides/install-git\" target=\"_blank\" style=\"color: var(--link-branded-color);\">install Git here</a>.</li><li><a href=\"https://docs.github.com/en/get-started/quickstart/create-a-repo\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Created a GitHub repository</a></li></ul><h3>Understanding what a commit is</h3><p>A commit is a snapshot of your repository. Running the command&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">git commit</code>&nbsp;saves a version of the codebase at that point in time. Imagine this: Git takes a “picture” of your codebase with information stating, “This is what your codebase looked like on January 12, 2022 at 3:55 pm.&nbsp;<a href=\"https://dev.to/blackgirlbytes\" target=\"_blank\" style=\"color: var(--link-branded-color);\">@blackgirlbytes</a>&nbsp;fixed a typo in the codebase at this time.” It’s suggested to make frequent, small commits to:</p><ul><li>Easily roll back small portions of your code if you make a mistake</li><li>Enable you (and others) to understand the evolution of the codebase</li></ul><h2>Undoing a commit after you push</h2><p>Let’s recreate a situation where you need to undo a commit after you push.</p><h3>Setup</h3><ul><li>In your repository, create a new file called index.md in our repository.</li></ul><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_DYX9_Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmr58mr8738uwnsko1nt.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_DYX9_Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmr58mr8738uwnsko1nt.png\" alt=\"This image is a screenshot of a repository that contains a file named index.md\" height=\"240\" width=\"880\"></a></p><ul><li>Let’s commit and push some changes to our repository. I added a few arbitrary changes for the sake of the tutorial. In the image below, I added the words “hey, there” on line 1 of our index.md. Then I ran the following commands to add, commit, and push the changes.</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">git add index.md\r\ngit commit -m \"added a greeting\"\r\ngit push\r\n</pre><p><br></p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_D48rZYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox8i4qkcqxqgzvzjzg6p.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_D48rZYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox8i4qkcqxqgzvzjzg6p.png\" alt=\"This image contains a screenshot of an IDE containing a file named index.html with the words &quot;hey, there&quot;.\" height=\"614\" width=\"880\"></a></p><h3>Reverting a commit</h3><ul><li>But, let’s say I realized I didn’t want to commit or push the words “hey, there” to my repository. Perhaps, I just added that for testing purposes, or I’m missing another line that I wanted to include in the commit. Let’s figure out how to undo the commit:</li></ul><p><strong>Look at the list of commits you made in this repository by running the command:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">git log -p\r\n</pre><p><br></p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WJ4vIovB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2xkq5x8b08s7safkhdu.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WJ4vIovB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2xkq5x8b08s7safkhdu.png\" alt=\"A screenshot containing a log of all my commits\" height=\"712\" width=\"880\"></a></p><p>From the image, we can see that we made two commits. The most recent commit indicates that we added the words “hey, there” on line 1. The oldest commit indicates that we created an index.md file. Each commit has a commit hash (the long alphanumeric unique string preceded by the word commit), a unique identifier for the attached commit.</p><p><strong>To undo the most recent commit, we can copy the commit hash and run the command:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">git revert [commit hash]\r\n</pre><p><br></p><p>In my case, I will run</p><pre class=\"ql-syntax\" spellcheck=\"false\">git revert 0a3dbc774ea29bfd68fe55caf1ade33dba1bda35\r\n\r\n</pre><p><br></p><h4><br></h4><h4><br></h4><h4><br></h4><h4>Other options</h4><ul><li>A shorter method is to run the command&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">git revert 0a3d</code>. Git is smart enough to identify the commit based on the first four (or more) characters.</li><li>You don’t have to use the commit hash to identify the commit you want to revert. You can use any value that is considered a gitrevision, including the:</li><li class=\"ql-indent-1\">Tag</li><li class=\"ql-indent-1\">Branch</li><li class=\"ql-indent-1\">Hash</li><li class=\"ql-indent-1\">Reference</li></ul><p><em>You can learn more about&nbsp;</em><a href=\"http://dionisev.com/2016/03/git-revisions\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><em>git revisions here</em></a><em>&nbsp;or on the&nbsp;</em><a href=\"https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection?msclkid=0ffe2e3fb4f311ecb90dafbdc221e5e8\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><em>git scm documentation</em></a><em>.</em></p><ul><li>You may see a message similar to the image below. This is called a COMMIT_EDITMSG; it holds a commit message of a commit in progress. It includes information about the commit that you’re reverting, including the author, the branch, the file, and the message. The goal for you is to review it and close the commit editor.</li><li>If this file opens in your IDE, you can just close the file at the top. If you’re seeing this message in your terminal via Vim, you can use the command&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">:wq</code></li></ul><p><em>Learn more about exiting this mode in this&nbsp;</em><a href=\"https://stackoverflow.com/questions/13239368/git-how-to-close-commit-editor\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><em>Stackoverflow answer</em></a><em>.</em></p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0XJDXHSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh9rl2sn16bw0icq6139.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0XJDXHSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh9rl2sn16bw0icq6139.png\" alt=\"Image description\" height=\"447\" width=\"880\"></a></p><p>Now that you’ve exited the terminal, you can finalize the process by running the command&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">git push</code>. After running this command, you’ve successfully reverted your commit.</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--g1ALH_r2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kru1s35f8s1qwquc2zc.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--g1ALH_r2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kru1s35f8s1qwquc2zc.png\" alt=\"Image description\" height=\"131\" width=\"880\"></a></p><p>You can double-check that you reverted the commit by viewing the repo\'s commit history on GitHub.com. The image below reflects an accurate commit log highlighting the moments I:</p><ul><li>Created the index.md file</li><li>Added a greeting</li><li>Reverted the commit</li></ul><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OP6IDSmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50gytfb4inkdxo8zqo0w.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OP6IDSmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50gytfb4inkdxo8zqo0w.png\" alt=\"Image description\" height=\"272\" width=\"880\"></a></p><p><strong>Thank you to&nbsp;</strong><a href=\"https://twitter.com/nathanktruong\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>Nathan</strong></a><strong>&nbsp;for reviewing and providing valuable feedback on this post.</strong>&nbsp;❤️</p><p><em>If this post helped you understand reverting commits, follow&nbsp;</em><a href=\"https://dev.to/github\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><em>GitHub</em></a><em>&nbsp;and&nbsp;</em><a href=\"https://dev.to/blackgirlbytes\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><em>me</em></a><em>&nbsp;on DEV!</em></p>',1,'2022-03-12 08:43:18','2022-04-26 08:12:51',NULL),(3,1,'How Do I Resolve Merge Conflicts?','How_Do_I_Resolve_Merge_Conflicts','','/images/posts/1/5a30635a37c3d59edfd2790322fccc12_2222022T181512_3122022T15448.jpg','<h2><a href=\"https://dev.to/blackgirlbytes/series/17601\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Intro to Git (2 Part Series)</a></h2><p><a href=\"https://dev.to/github/how-do-i-resolve-merge-conflicts-5438\" target=\"_blank\" style=\"color: var(--base-inverted);\">1</a></p><p><a href=\"https://dev.to/github/how-do-i-resolve-merge-conflicts-5438\" target=\"_blank\" style=\"color: var(--base-100);\">How Do I Resolve Merge Conflicts?</a></p><p><a href=\"https://dev.to/github/how-to-undo-pushed-commits-with-git-2pe6\" target=\"_blank\" style=\"color: var(--base-70);\">2</a></p><p><a href=\"https://dev.to/github/how-to-undo-pushed-commits-with-git-2pe6\" target=\"_blank\" style=\"color: var(--link-color);\">How to Undo Pushed Commits with Git</a></p><p>I don’t think I’m alone in saying this; early in my career, merge conflicts were the bane of my existence (particularly in 2019). I graduated from a coding boot camp in 2018, and during that time, if I ever experienced a git issue that I didn’t know how to fix, I would create a new repository and start over. In 2019, I started working as a software engineer with a team of other software engineers, so I couldn’t create new repositories to avoid this inconvenience. I had to face my fears and fix merge conflicts. No exaggeration; the experience would bring me to tears. See the screenshot below of me making a self-deprecating joke about mishandling merge conflicts on July 14, 2019.</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NrvsHmM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c96ati0pdg1ekv8bzl72.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NrvsHmM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c96ati0pdg1ekv8bzl72.png\" alt=\"Rizel Scarlett @blackgirlbytes July 14, 2019 “Lmboo I be near the point of tears when I get suck in a merge conflict. I’m like, get me out of here.” Attached is a GIF of Eric Andre pulling a fence trying to get out of the area he’s in. \" height=\"853\" width=\"880\"></a></p><p>Fortunately, today, I’m more comfortable with resolving merge conflicts. It still stresses me out a bit, but I have a few tips and tricks I use to resolve the situation.</p><h2>Prerequisites to resolving a merge conflict</h2><h3>Breathe</h3><p><br></p><p>GIF<img src=\"https://i.giphy.com/media/krP2NRkLqnKEg/giphy.gif\" height=\"311\" width=\"287\"></p><p><br></p><h3>It’s okay. Conflicts happen. You’re not the first person to experience a merge conflict. Everyone experiences merge conflicts frequently regardless of their seniority. It’s a common occurrence in version control.Understand why merge conflicts happen</h3><p>Version control systems, like Git, auto-magically manage code contributions. It identifies the change, when it was made, who made it, and on what line so that developers can easily track the history of their codebase. However, Git sometimes gets confused in the following situations:</p><ul><li>When more than one person changes the same line in a file and tries to merge the change to the same branch</li><li>When a developer deletes a file, but another developer edits it, and they both try to merge their changes to the same branch.</li><li>When a developer deletes a line, but another developer edits it, and they both try to merge their changes to the same branch</li><li>When a developer is cherry-picking a commit, which is the act of picking a commit from a branch and applying it to another</li><li>When a developer is rebasing a branch, which is the process of moving a sequence of commits to a base commit</li></ul><p>Git is unsure which change to apply, so it leans on the developer for help and notifies them of a merge conflict. Your job is to help Git determine which proposed change is most accurate and up to date.</p><h2>Resolving Merge Conflicts</h2><h3>In Visual Studio Code (or IDE of your preference)</h3><p><strong>Read the logs</strong></p><p>When you run&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">git merge</code>&nbsp;and a merge conflict occurs, your terminal or command prompt will respond with a message like:</p><p><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">CONFLICT (content): Merge conflict in [filename]</code></p><p>This message means a conflict occurred in this particular file.</p><p><strong>Find the conflict</strong></p><p>Navigate to the file that Git indicated had a merge conflict and scroll through the file until you find the conflict. Your IDE may indicate where the merge conflict occurred by highlighting the changes the conflicting changes made to the file. The below example shows how VS code may highlight the conflicting changes. VS Code highlights the current change and the incoming change.</p><p>The&nbsp;<strong>current change</strong>&nbsp;(sometimes called an outgoing change) represents the code changes that you made on your local branch.</p><p>The&nbsp;<strong>incoming change</strong>&nbsp;represents the code changes you are pulling in from the base branch or modifications made by other developers.</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PK2dGmEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ab88yqzqrkjaq6pwinxt.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PK2dGmEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ab88yqzqrkjaq6pwinxt.png\" alt=\"Merge conflict being highlighted in Visual Studio Code\" height=\"464\" width=\"701\"></a></p><p><strong>Decide which changes need to be applied</strong></p><p>Deciding if you want to accept current changes, incoming changes, or all the changes depends on the ultimate goal for your program. This part is up to you, your knowledge of what changes are needed, and your team.</p><p>If you’re unsure which changes to accept, it’s best to consult with your team or developer who wrote the incoming changes. You can accept changes without committing the code and test program locally for a sanity check.</p><p><strong>Remove any lingering&nbsp;</strong><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\"><strong>====</strong></code><strong>&nbsp;,&nbsp;</strong><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\"><strong>&lt;&lt;&lt;&lt;</strong></code><strong>, or&nbsp;</strong><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\"><strong>&gt;&gt;&gt;&gt;</strong></code><strong>&nbsp;symbols</strong></p><p>Those symbols are used to help you determine where the merge conflicts occurred. When you accept the preferred changes, those symbols usually disappear, but sometimes a glitch happens, and they don’t disappear. You don’t want accidentally commit those symbols if they persist in the file because that can create bugs in your program.</p><p><strong>What if I make a mistake?</strong></p><p>If you make a mistake or you’re not confident which the decision change to accept, you can stop the merge process by running the following command:</p><pre class=\"ql-syntax\" spellcheck=\"false\">`git merge -- abort`\r\n</pre><p><br></p><p>After you do that, don’t sit there and get frustrated. Reach out to a teammate (preferably one whose code is conflicting with yours or an engineer you can trust) and explain the situation saying: “Hey, I’m experiencing a merge conflict when I try to merge my code. I’m not feeling confident about which changes I should accept. Do you have any availability to pair with me for a few minutes?”</p><p><strong>If you’re feeling confident about the resolved merge conflict, commit the changes</strong></p><p>After you accept the necessary changes and you’re ready to commit the change, you can take the following steps:</p><ul><li>Save the files where changes were made</li><li>Run&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">git status</code>&nbsp;to ensure the right files were changed</li><li>Run&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">git add [file name]</code>&nbsp;to add the files you changed to staging</li><li>Run&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">git commit -m “[add your commit message here]”</code>&nbsp;to commit your changes</li><li>And then run&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">git push</code></li></ul><h3>On GitHub.com</h3><p><strong>Identify which files have a merge conflict</strong></p><p>When you open a PR on GitHub, it will let you know that there are merge conflicts and which files have conflicts.</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ij5XvG19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6z9opruoq24n91uiicf.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ij5XvG19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6z9opruoq24n91uiicf.png\" alt=\"Image description\" height=\"186\" width=\"591\"></a></p><p><strong>Find the conflicts</strong></p><p>To find the conflicts, click ‘Resolve conflicts’, and it will lead you to the files with conflicts.</p><p><strong>Decide which changes need to be applied</strong></p><p>The GitHub Web UI will highlight the conflicting changes with yellow and the following symbols:&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">&lt;&lt;&lt;&lt;&lt;</code>&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">====,</code>&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">&gt;&gt;&gt;&gt;</code>.</p><p>It will also indicate which branch those changes are coming from. This should help you determine which changes you want to accept.</p><p>Deciding if you want to use the changes from your branch, the base branch, or both depends on the ultimate goal for your program. This part is up to you, your knowledge of what changes are needed, and your team. Delete the lines you don’t want and keep the ones you do want.</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gSj-Bpwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3b475ulq5ih4nzs4nzh.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gSj-Bpwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3b475ulq5ih4nzs4nzh.png\" alt=\"Image description\" height=\"375\" width=\"880\"></a></p><p><strong>Remove any lingering&nbsp;</strong><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\"><strong>====</strong></code><strong>&nbsp;,&nbsp;</strong><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\"><strong>&lt;&lt;&lt;&lt;</strong></code><strong>, or&nbsp;</strong><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\"><strong>&gt;&gt;&gt;&gt;</strong></code><strong>&nbsp;symbols</strong></p><p>Those symbols are used to help you determine where the merge conflicts occurred.You don’t want accidentally commit those symbols because that can create bugs in your program.</p><p><strong>If you’re feeling confident about the resolved merge conflict, commit the changes.</strong></p><p>Once you remove the conflicting changes and any symbols used to highlight the conflicting changes, click ‘Mark as Resolved’ and click the ‘Commit merge’ button to commit your changes.</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SumdsGxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz453u8srnjxh75k0v8i.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SumdsGxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz453u8srnjxh75k0v8i.png\" alt=\"Image description\" height=\"137\" width=\"880\"></a></p><p>You can read more about merge conflicts and how to resolve them on&nbsp;<a href=\"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/about-merge-conflicts\" target=\"_blank\" style=\"color: var(--link-branded-color);\">GitHub’s official documentation</a>.</p><p><em>Comment below if you have follow-up questions! Share this post if you find it helpful.</em></p>',1,'2022-04-12 08:44:08','2022-04-12 08:44:08',NULL),(4,2,'Those HTML Elements You Never Use ???','Those_HTML_Elements_You_Never_Use','','/images/posts/2/213fe880455d8803d14c_2112022T193415_3122022T154550.jpg','<p>There are over&nbsp;<strong>a hundred</strong>&nbsp;elements in HTML, all of which can be applied to pieces of text to give them special meaning in a document. Most of us only know a few, like the&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\" target=\"_blank\">&lt;p&gt;</a></code>,&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div\" target=\"_blank\">&lt;div&gt;</a></code>, and&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body\" target=\"_blank\">&lt;body&gt;</a></code>&nbsp;elements…</p><p>But there are actually a bunch more hidden in the dark realms of the&nbsp;<a href=\"https://dev.w3.org/html5/html-author/\" target=\"_blank\" style=\"color: var(--link-branded-color);\">W3C reference</a>. That’s why, in this article, I took the liberty of diving deep into the HTML documentation, to come out with a handy bag of elements that will improve your website in not one, but&nbsp;<strong>two</strong>&nbsp;very important ways: accessibility and SEO.</p><p>Press&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">Ctrl</code>+<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">D</code>&nbsp;to bookmark this article and easily come back to it when you need it. And with that said, let’s begin!</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr\" target=\"_blank\">&lt;abbr&gt;</a></code>&nbsp;— Abbreviation</h2><p><br></p><p>GIF<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NKlVs8XL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wa955z63369nucw8xrgx.gif\" alt=\"abbr\" height=\"154\" width=\"780\"></p><p>This elements represents both&nbsp;<strong>abbreviations</strong>&nbsp;(like Corporation ➟ Corp.) and&nbsp;<strong>acronyms</strong>&nbsp;(like Cascading Style Sheets ➟ CSS). Additionally, you can use its&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">title</code>&nbsp;attribute to write the full form of the word so that screen readers can read it and users can hover over it to read it.</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins\" target=\"_blank\">&lt;ins&gt;</a></code>&nbsp;and&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del\" target=\"_blank\">&lt;del&gt;</a></code>&nbsp;— Insert and Delete</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TracmDXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcgyhckvdocsm1hawh2c.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TracmDXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcgyhckvdocsm1hawh2c.png\" alt=\"ins\" height=\"427\" width=\"880\"></a></p><p>The&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins\" target=\"_blank\">&lt;ins&gt;</a></code>&nbsp;and&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del\" target=\"_blank\">&lt;del&gt;</a></code>&nbsp;elements represent a range of text that has been added or deleted to a document. You may have already seen these elements in the&nbsp;<a href=\"https://github.com/vercel/next.js/pull/36067/files\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Github Pull Requests</a>.</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn\" target=\"_blank\">&lt;dfn&gt;</a></code>,&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var\" target=\"_blank\">&lt;var&gt;</a></code>,&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd\" target=\"_blank\">&lt;kbd&gt;</a></code>,&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp\" target=\"_blank\">&lt;samp&gt;</a></code>, and&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output\" target=\"_blank\">&lt;output&gt;</a></code>&nbsp;— Technical Elements</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uD4jL3wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5re9db9y6aupb95scm8.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uD4jL3wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5re9db9y6aupb95scm8.png\" alt=\"dfn\" height=\"130\" width=\"748\"></a></p><p>These are elements that represent special technically-oriented parts in a document, like definitions, variables, keystrokes, etc…</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b\" target=\"_blank\">&lt;b&gt;</a></code>,&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i\" target=\"_blank\">&lt;i&gt;</a></code>,&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u\" target=\"_blank\">&lt;u&gt;</a></code>, and&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s\" target=\"_blank\">&lt;s&gt;</a></code>&nbsp;— Text Effects</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--F7ZGJHRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ift2jvf6f40h22a5ikn1.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--F7ZGJHRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ift2jvf6f40h22a5ikn1.png\" alt=\"s\" height=\"138\" width=\"755\"></a></p><p>These elements can change the looks of text by either making it bold, italic, underlined, or adding a strikethrough.</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo\" target=\"_blank\">&lt;bdo&gt;</a></code>&nbsp;— Text Directionality</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bsyh01Xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y7pjd4a33odpbw0onnl.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bsyh01Xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y7pjd4a33odpbw0onnl.png\" alt=\"bdo\" height=\"302\" width=\"736\"></a></p><p>This element changes the directionality of text to make it render backwards. You can control its behavior using the&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">dir</code>&nbsp;attribute.</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark\" target=\"_blank\">&lt;mark&gt;</a></code>&nbsp;— Highlighting Text</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z6fRXU6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcgbki4wsap0qsen4tyk.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z6fRXU6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcgbki4wsap0qsen4tyk.png\" alt=\"mark\" height=\"259\" width=\"739\"></a></p><p>The purpose of this element is to highlight text like you would with a marker.</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area\" target=\"_blank\">&lt;area&gt;</a></code>&nbsp;— Clickable Image Areas</h2><p><br></p><p>GIF<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HECXjWZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70134tynvhr0kzzxl1hl.gif\" alt=\"area\" height=\"417\" width=\"780\"></p><p>You can use this element to make certain areas of your image behave like links!</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\" target=\"_blank\">&lt;dl&gt;</a></code>,&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd\" target=\"_blank\">&lt;dd&gt;</a></code>, and&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt\" target=\"_blank\">&lt;dt&gt;</a></code>&nbsp;— Description Lists</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--myv-moWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sp6u46opu6a1lbsffa5.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--myv-moWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sp6u46opu6a1lbsffa5.png\" alt=\"dl\" height=\"314\" width=\"741\"></a></p><p>You can use these elements to create a semantically-accurate description list where you define multiple terms in one block of text.</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure\" target=\"_blank\">&lt;figure&gt;</a></code>&nbsp;and&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption\" target=\"_blank\">&lt;figcaption&gt;</a></code>&nbsp;— Labeled Images</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--M21jwq7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gpjjur0gp27hy5qbltt.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--M21jwq7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gpjjur0gp27hy5qbltt.png\" alt=\"figure\" height=\"296\" width=\"738\"></a></p><p>You can use&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure\" target=\"_blank\">&lt;figure&gt;</a></code>&nbsp;to contain any element that you want, like an image for example. And then, you add&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption\" target=\"_blank\">&lt;figcaption&gt;</a></code>&nbsp;as its last child, where you can add a block of text that describes what’s above it.</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress\" target=\"_blank\">&lt;progress&gt;</a></code>&nbsp;— Marking Progress</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ug7S6DDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/393avkx9ul4wpse5wrd6.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ug7S6DDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/393avkx9ul4wpse5wrd6.png\" alt=\"progress\" height=\"68\" width=\"759\"></a></p><p>This one allows you to create semantically-right progress-bar elements where you show how far an action is from being finished.</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details\" target=\"_blank\">&lt;details&gt;</a></code>&nbsp;— Expandable Menus</h2><p><br></p><p>GIF<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SytsLGHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7brbrc0rpzb876hanhoi.gif\" alt=\"details\" height=\"194\" width=\"780\"></p><p>You can use this element to create a native menu that has a title and can expand using a button. No JavaScript needed.</p><h2>?&nbsp;<code style=\"color: var(--link-branded-color); background-color: rgba(0, 0, 0, 0.1);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\" target=\"_blank\">&lt;dialog&gt;</a></code>&nbsp;— Pop-up Dialogs</h2><p><br></p><p>GIF<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NGA1b7oN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt72qoiv39zlcpkh5jsx.gif\" alt=\"dialog\" height=\"375\" width=\"780\"></p><p>It’s possible to create semantically-accurate dialogs using this element. It doesn’t do much by itself, so you have to use CSS and JavaScript to add more functionality.</p><p>If you found this guide useful, please don’t forget to&nbsp;<strong>bookmark it</strong>&nbsp;for future reference.</p><p>I make posts like this everyday, so&nbsp;<strong>follow me</strong>&nbsp;to stay informed. ❤️</p>',1,'2022-04-12 08:45:50','2022-04-12 08:45:50',NULL),(5,2,'I built a DEV.to clone from scratch (including the API!) ?‍??','I_built_a_DEV.to_clone_from_scratch_(including_the_API!)','','/images/posts/2/secure-rest-api-in-nodejs-18f43b3033c239da5d2525cfd9fdc98f_242022T81155_3122022T154721.png','<p>Hey guys, I wanted to showcase my latest project: A DEV clone.</p><h2>Why I made it</h2><p>My motivation behind the project was simple: I had learnt both frontend (React) and backend (MongoDB, Node, Express) technologies and wanted to build a full-stack React app to learn how both sides work together. Initially, I decided to make a blog website where I could post my notes on anything new I learned. Then, I came to know about DEV.to (believe me, I didn\'t know about it until some months ago) so I decided to make a clone.</p><h2>The Mindset:</h2><p>Going in, I decided that I will not shy away from building any complex features present on the original website. Even though it\'s a clone (and nobody will probably ever use it), it\'s still a clone of a real-world application, and building it with that mindset will make you a better developer. For example, you write efficient queries because you care about the speed of the response from the server.</p><h3>Tech</h3><ul><li>UI:&nbsp;<a href=\"https://github.com/facebook/react\" target=\"_blank\" style=\"color: var(--link-branded-color);\">React</a></li><li>Routing:&nbsp;<a href=\"https://github.com/ReactTraining/react-router\" target=\"_blank\" style=\"color: var(--link-branded-color);\">React Router</a></li><li>Real-time Notifications:&nbsp;<a href=\"https://github.com/socketio/socket.io\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Socket.io</a></li><li>Backend:&nbsp;<a href=\"https://github.com/expressjs/express\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Express</a></li><li>Database:&nbsp;<a href=\"https://github.com/mongodb/mongo\" target=\"_blank\" style=\"color: var(--link-branded-color);\">MongoDB</a></li><li>ORM:&nbsp;<a href=\"https://github.com/Automattic/mongoose\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Mongoose</a></li><li>Image hosting:&nbsp;<a href=\"https://cloudinary.com/\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Cloudinary</a></li></ul><p>Enough talking! Let\'s see the clone in action:</p><h3>Login / Signup</h3><p>The application consists of local authentication (using JWT) as well as OAuth services of Google, Facebook, GitHub, and Twitter:</p><p><br></p><p>GIF<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--YK6ww9Mv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/drkvr9wta/image/upload/v1649308727/devto-clone/login-signup_cw4dnt.gif\" alt=\"Login / Signup\" height=\"550\" width=\"880\"></p><h3>Like / Unicorn / Bookmark</h3><p>Just like the original, there are 3 \"reaction\" features: like, unicorn (whose mystery I am yet to unravel), and bookmark.</p><p><br></p><p>GIF<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9G-ZD2pR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nuru19htzhdz8vzpoeht.gif\" alt=\"Like / Unicorn / Bookmark\" height=\"550\" width=\"880\"></p><h3>New Post</h3><p>Users can create / update / delete posts.</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Y8i5OSMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84r4n2q8uhvs5ncp4gpu.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Y8i5OSMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84r4n2q8uhvs5ncp4gpu.png\" alt=\"New Post\" height=\"550\" width=\"880\"></a></p><p>(A gif wasn\'t working here so I just added an image)</p><h3>Comments and Replies</h3><p>Users can comment /reply but unlike the original DEV, I limited my clone\'s comment section to just one thread.</p><p><br></p><p>GIF<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gTRbfPCz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/drkvr9wta/image/upload/v1649310925/devto-clone/compressed-comments-replies_qsnuae.gif\" alt=\"Comments and Replies\" height=\"550\" width=\"880\"></p><h3>Real-time Notifications</h3><p>The user gets notifications when he\'s followed or his post receives a like or comment from another user.</p><p><br></p><p>GIF<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hphI0S_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enxfnq5348w1dq7umhb2.gif\" alt=\"Real-time Notifications\" height=\"550\" width=\"880\"></p><h3>Follow Tags</h3><p>Whenever a user creates a new post, he can add tags (no set limit as of now). If the tag doesn\'t exist, it\'s created and attached to the post. Furthermore, the user can follow/unfollow tags and get posts filtered by tags as well.</p><p><br></p><p>GIF<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--p-uDcZ8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/drkvr9wta/image/upload/v1649308992/devto-clone/tags_y7jhbu.gif\" alt=\"Follow Tags\" height=\"550\" width=\"880\"></p><h3>Edit Profile</h3><p>Users can update their profile by providing information about their work, skills/languages, bio, social media, and location.</p><p><br></p><p>GIF<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JRxvBhv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxq6vsvpknpdkdm0id84.gif\" alt=\"Edit Profile\" height=\"550\" width=\"880\"></p><h3>Search</h3><p>Users can search for posts (only via titles as of now).</p><p><br></p><p>GIF<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1W4mHG1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/io3ic9gpd80bs7f94epv.gif\" alt=\"Search\" height=\"550\" width=\"880\"></p><h2>What I learned:</h2><p>There are three most important factors that distinguish a good project from a great project:</p><ol><li>UI: The first thing people are going to compare when judging your clone is the UI. So, I tried to make it as close to the original as possible. It was a challenge to match the UI with the original on both desktop and mobile but I got through.</li><li>Features: As you saw, I tried to implement all the core features of the original DEV. Starting out, I had no idea how to go about working on real-time functionalities such as notifications. But you grow the most when you do the things you don\'t know how to do.</li><li>Code readability: You don\'t write code for just the machine. In real-world, you write it for other people to read. Being able to write code that is easy to read is an essential skill to master.</li></ol><h2>That\'s it</h2><p>I put a lot of effort into the DEV clone and I hope you liked it. Feel free to ask anything about the project!</p><p>You can access the code at my&nbsp;<a href=\"https://github.com/eknoorpreet/dev.to-clone\" target=\"_blank\" style=\"color: var(--link-branded-color);\">GitHub repo</a>.</p><p>Here\'s the&nbsp;<a href=\"https://devfrom.netlify.app/\" target=\"_blank\" style=\"color: var(--link-branded-color);\">deployed site</a></p>',1,'2022-04-12 08:47:21','2022-04-12 08:47:21',NULL),(6,2,'[JavaScript] Bài 24 - Procedural & Functional','JavaScript_Bai_24_-_Procedural_and_Functional','','/images/posts/2/download_342022T144243_3122022T154856.png','<p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">+-------------------------------------------+\r\n|   Data-Driven       &amp;   Event-Driven      |\r\n|   Reflective        &amp;   Reactive          |\r\n|   Object-Oriented   &amp;   Agent-Oriented    |\r\n|   Procedural        &amp;   Functional        |\r\n|   Imperative        &amp;   Declarative       |\r\n+-------------------------------------------+\r\n</pre><p>Trong bài viết này, chúng ta sẽ cùng tản mạn về&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Procedural Programming</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Functional Programming</code>&nbsp;- tạm dịch là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">lập trình thủ tục</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">lập trình hàm</code>.</p><h2><strong>Hàm thì chúng ta biết rồi nhưng thủ tục là cái gì thế?</strong></h2><p>Trước khi bắt đầu, bạn có thể đặt khái niệm hàm mà chúng ta đã biết sang một bên được không?&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\">&nbsp;Bởi vì để thuận lợi cho quãng thời gian khởi đầu, mình đã cố gắng giới thiệu các khái niệm theo hướng dễ tiếp cận nhất. Nhưng tới thời điểm hiện tại thì những cách hiểu cũ của chúng ta không hẳn là hoàn toàn phù hợp nữa. Ở đây chúng ta sẽ lại xuất phát từ vị trí hơi gần con số&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">0</code>&nbsp;nhé.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><p>Về cơ bản thì các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ tục</code>&nbsp;và các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;khi được biểu thị trong các ngôn ngữ lập trình phổ biến sẽ đều có điểm chung là các khối lệnh được đặt tên và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">có thể gọi được</code>&nbsp;- hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">callable</code>.</p><p>Điểm khác biệt chính giữa hai khái niệm này là một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ tục</code>&nbsp;hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">procedure</code>, được xem là một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">tác vụ</code>, hay một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">công việc</code>&nbsp;cần được tiến hành, hay một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hành động</code>&nbsp;của một chủ thể nào đó tác động lên một tối tượng dữ liệu để tạo ra sự thay đổi, cập nhật trên đối tượng dữ liệu đó. Ví dụ như trong cuộc sống hàng ngày, có khi chúng ta cần đi tới một cơ quan nào đó để thực hiện&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ thục</code>&nbsp;này hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ tục</code>&nbsp;kia, đó chính là lúc chúng ta thực hiện một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">procedure</code>.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><p>Trong khi đó thì một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm (toán học)</code>&nbsp;hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">function</code>, lại&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">không</code>&nbsp;được xem là một tác vụ, hay công việc, hay hành động của một chủ thể nào và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">không</code>&nbsp;tác động lên một đối tượng dữ liệu nào cả. Một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;chỉ đơn giản là một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">định nghĩa</code>&nbsp;biểu thị mối liên hệ tương quan giữa các yếu tố thường được gọi là các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">tham số</code>&nbsp;và một giá trị&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">đích đến</code>.</p><p>Trong một số ngôn ngữ lập trình như&nbsp;<a href=\"https://learn.adacore.com/courses/intro-to-ada/chapters/subprograms.html#subprogram-calls\" target=\"_blank\" style=\"background-color: initial; color: rgb(43, 109, 173);\"><strong>Ada</strong></a>&nbsp;hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">SQL [Server | Oracle]</code>&nbsp;thì việc khai báo&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ tục</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;sẽ được phân biệt bởi các từ khóa&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">procedure</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">function</code>. Điều này giúp người sử dụng luôn phân biệt được rất rõ hai khái niệm này và giúp cho việc thiết kế các khối lệnh&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">callable</code>&nbsp;sẽ trở nên có chủ đích rõ ràng và rành mạch hơn.</p><p>Còn ở đây, với JavaScript, chúng ta có một&nbsp;<a href=\"https://viblo.asia/p/QpmleRQ95rd\" target=\"_blank\" style=\"background-color: initial; color: rgb(43, 109, 173);\"><strong>từ khóa được tạo ra bởi một lỗi đánh máy</strong></a>&nbsp;và được sử dụng chung cho cả hai.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><pre class=\"ql-syntax\" spellcheck=\"false\">// thủ tục thực hiện công việc\r\n// tăng giá trị của một object lên gấp hai lần\r\n\r\nfunction doubleIt(theObject) {\r\n   theObject.value *= 2\r\n}\r\n\r\nvar just = { value: 1 };\r\ndoubleIt(just);\r\nconsole.log(just);   // { value: 2 }\r\n// hàm f(x) = x * 2\r\n// biểu thị liên hệ giữa một giá trị x\r\n// và một giá trị khác ở đâu đó, lớn gấp 2 lần x\r\n\r\nfunction f(x) {\r\n   return x * 2;\r\n}\r\n\r\nvar one = 1;\r\n\r\nf(1);   // one sẽ không bị thay đổi\r\nconsole.log(one);   // 1\r\n\r\nvar two = f(1);   // lưu lại giá trị đối chiếu từ one\r\nconsole.log(two);   // 2\r\n</pre><h2><strong>Nếu vậy khi nói tới&nbsp;</strong><code style=\"background-color: rgb(238, 238, 238); color: inherit;\"><strong>hàm</strong></code><strong>&nbsp;có nghĩa là chúng ta chỉ làm việc với các giá trị số học?</strong></h2><p>Không. Hoàn toàn không phải vậy. Khái niệm&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;đúng là được vay mượn từ toán học, nhưng trong lập trình nói chung thì hoàn toàn không hề bị giới hạn xung quanh các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">định nghĩa</code>&nbsp;liên quan tới các giá trị số học.</p><p>Khi sử dụng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>, chúng ta chỉ cần đảm bảo tiêu chí ban đầu - đó là không thực hiện thao tác nào tác động thay đổi lên các đối tượng dữ liệu đầu vào. Tất cả những gì chúng ta làm là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">định nghĩa</code>&nbsp;mối liên hệ tương quan giữa&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">tham số</code>&nbsp;của hàm và một giá trị&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">đích đến</code>.</p><pre class=\"ql-syntax\" spellcheck=\"false\">// hàm f(object) đối chiếu giữa một object ban đầu\r\n// với một object đích đến có giá trị value gấp hai lần\r\n\r\nfunction doubleOf(theObject) {\r\n   var anotherObject = { value: theObject.value * 2 };\r\n   return anotherObject;\r\n}\r\n\r\nvar just = { value: 1 };\r\nvar anotherJust = doubleOf(just);\r\n\r\nconsole.log(just);   // { value: 1 }\r\nconsole.log(anotherJust);   // { value: 2 }\r\n</pre><p>Và như đã nói, trong code ví dụ ở trên, chúng ta đã không thực hiện thao tác nào tác động lên&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">just</code>&nbsp;để tạo ra thay đổi về mặt nội dung của&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">just</code>. Các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;hoàn toàn không quan tâm tới câu hỏi&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Việc cần làm là gì?</code>; Và cũng không quan tâm tới các yếu tố của môi trường bên ngoài phần định nghĩa hàm.</p><p>Khi chúng ta sử dụng hàm&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">doubleOf</code>&nbsp;và cung cấp một object&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">just</code>&nbsp;bất kỳ vào vị trí của tham số&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">theObject</code>, thì logic định nghĩa bởi&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">doubleOf</code>&nbsp;sẽ chỉ đường cho chúng ta tìm đến một object khác&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">anotherJust</code>. Theo cách nói của các bạn yêu thích môn toán thì đó là một ánh xạ từ miền giá trị này sang một miền giá trị khác. Mấy từ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">ánh xạ</code>&nbsp;với&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">miền giá trị</code>&nbsp;nghe oách thật; Nhưng mà thôi, chúng ta cứ dùng từ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">chỉ đường</code>&nbsp;đi cho dân dã.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><h2><strong>Những đặc tính cơ bản</strong></h2><p>Xuất phát từ những định nghĩa cơ bản ở trên thì chúng ta có thêm được một số cái gạch đầu dòng về các đặc tính cơ bản của&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">procedural</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;ở đây. Tuy nhiên thì để dễ nhớ hơn, chúng ta sẽ liệt kê những đặc tính này ở dạng so sánh song song giữa hai khía cạnh tư duy này.</p><p><br></p><h3><strong>a. Imperative &amp; Declarative</strong></h3><p>Với những gì đã thảo luận từ nãy tới giờ thì rõ ràng là chúng ta có thể nhận ra đặc điểm của&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">procedural</code>&nbsp;là được đặt nền móng trên&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>&nbsp;mà chúng ta đã nói đến ở bài viết trước. Chính vì vậy nên hai khái niệm&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Procedural Programing</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Imperative Programming</code>&nbsp;đôi khi được người ta đánh đồng.</p><p>Tuy nhiên thì cái tên&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>&nbsp;chỉ nói chung chung về khía cạnh tuần tự của code liên ứng với logic vận hành của chương trình, còn từ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">procedural</code>&nbsp;lại được sử dụng để nhấn vào trọng tâm thiết kế phần mềm là các khối code&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">callable</code>&nbsp;đại diện cho các tác vụ nhỏ hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">phương thức</code>&nbsp;hoạt động của chương trình; Và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">procedural</code>&nbsp;cũng không bị giới hạn trong khuôn khổ của&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>.</p><pre class=\"ql-syntax\" spellcheck=\"false\">void function main() {\r\n   var a = { value: null };\r\n   var b = { value: null };\r\n   var result = { value: null };\r\n   \r\n   getUserInput(a, b);\r\n   calculate(a, b, result);\r\n   updateView(result);\r\n} (); // chạy chương trình\r\n\r\nfunction getUserInput(out_A, out_B) {\r\n   var inputA = document.getElementById(\'input-a\');\r\n   out_A.value = Number.parseInt(inputA.value);\r\n   \r\n   var inputB = document.getElementById(\'input-b\');\r\n   out_B.value = Number.parseInt(inputB.value);\r\n} // getUserInput\r\n\r\nfunction calculate(in_A, in_B, out_Result) {\r\n   out_Result.value = (in_A.value + in_B.value) * 1001;\r\n} // calculate\r\n\r\nfunction updateView(in_Value) {\r\n   var view = document.getElementById(\'result\');\r\n   view.textContent = in_Value;\r\n} // updateView\r\n</pre><p>Trong khi đó thì&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;ở khía cạnh khác lại được đặt nền móng trên&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">declarative</code>, và nhấn vào trọng tâm thiết kế phần mềm là các khối code&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">callable</code>&nbsp;biểu thị các mối liên kết giữa các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">nút giá trị</code>&nbsp;trong chương trình.</p><p>Ví dụ khi người dùng thao tác và tạo ra một sự kiện, chúng ta nhận được một giá trị&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">A</code>&nbsp;và trong nội dung của code&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;sẽ chỉ toàn là các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;biểu thị liên hệ từ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">A</code>&nbsp;trỏ tới&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">B</code>&nbsp;rồi tới&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">C</code>&nbsp;... rồi tới&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Z</code>. Giá trị&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">A</code>&nbsp;ban đầu sẽ không bị thay đổi, và giá trị&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Z</code>&nbsp;tìm thấy ở đâu đó sau khi đi theo&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">chỉ dẫn</code>&nbsp;của các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;sẽ được sử dụng để phản hồi cho người dùng.</p><p>Nói tới đây thì chúng ta cũng thấy rằng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">declarative</code>&nbsp;về cơ bản sẽ không thể tách rời hoàn toàn khỏi&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">procedural</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>. Bởi vì sau cùng thì phần mềm mà chúng ta viết ra vẫn sẽ phải phản hồi lại kết quả cho môi trường bên ngoài theo cách nào đó.</p><p>Các khối code&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">callable</code>&nbsp;của&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">declarative</code>&nbsp;về cơ bản đều là các giá trị trừu tượng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thụ động</code>&nbsp;và sẽ không tự động tạo ra ảnh hưởng gì tới môi trường bên ngoài. Do đó phần code tương tác với người dùng ở dạng tiếp nhận yêu cầu hay sự kiện thao tác vẫn sẽ phải là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">procedural</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>.</p><p>Chính vì vậy nên ngay cả các ngôn ngữ được gọi là thuần&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Functional Programming</code>&nbsp;ví dụ như&nbsp;<a href=\"https://www.haskell.org/\" target=\"_blank\" style=\"background-color: initial; color: rgb(43, 109, 173);\"><strong>Haskell</strong></a>&nbsp;vẫn có một chút code&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Input/Output</code>&nbsp;được viết ở dạng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>. Và nếu như ứng vào ví dụ ở phía trên thì chúng ta có các thủ tục&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">getUserInput</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">updateView</code>&nbsp;thuộc về các tác vụ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Input/Output</code>&nbsp;hiển nhiên không thể thay thế bởi code&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>. Vị trí của&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;là ở giai đoạn đi từ các giá trị&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">input</code>&nbsp;tới&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">result</code>, và có thể thay thế cho thủ tục&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">calculate</code>.</p><h3><strong>b. Phương Thức &amp; GIá Trị</strong></h3><p>Các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ tục</code>&nbsp;hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">procedure</code>&nbsp;về cơ bản thì như chúng ta đã nói đó là các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hành động</code>&nbsp;của một chủ thể nào đó. Ngay cả khi chương trình mà chúng ta viết ra không làm việc với các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">object</code>&nbsp;thì chúng ta vẫn có thể xem đó là các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">phương thức</code>&nbsp;của phần mềm tổng bộ. Một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ tục</code>&nbsp;có ý nghĩa biểu thị là một thao tác hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">cách thức</code>&nbsp;thực hiện công việc, và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">không</code>&nbsp;có ý nghĩa biểu thị là một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">giá trị</code>.</p><p>Trong khi đó, các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">function</code>&nbsp;như chúng ta cũng vừa thảo luận thì lại&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">không</code>&nbsp;biểu thị cho hành động hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">cách thức</code>&nbsp;thực hiện công việc, và sẽ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">không</code>&nbsp;thực hiện tác động&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thay đổi</code>&nbsp;lên các đối tượng dữ liệu. Và bởi vì ứng với mỗi một giá trị ban đầu, chúng ta luôn luôn có thể sử dụng một hàm để đối chiếu tới một giá trị khác ở đâu đó; Do đó nên một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;còn được xem là biểu thị cho một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">giá trị trừu tượng</code>, và chúng ta có thể truyền các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">giá trị trừu tượng</code>&nbsp;kiểu này vào một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;nào đó khác cần sử dụng - hoặc trả về một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">giá trị trừu tượng</code>&nbsp;ở vị trí mà một hàm được gọi.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><pre class=\"ql-syntax\" spellcheck=\"false\">const map = function(func) {\r\n   return function(arr) {\r\n      var [first, ...rest] = arr;\r\n   \r\n      if (arr.length == 0)    return [];\r\n      if (\'in-normal-case\')   return [func(first), ...map(func)(rest)];\r\n   };\r\n}; // map\r\n\r\nconst doubleOf = function(num) {\r\n   return num * 2;\r\n};\r\n\r\nconst tripleOf = function(num) {\r\n   return num * 3;\r\n};\r\n\r\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\nvar doubleOfArr = map(doubleOf)(arr);\r\nconsole.log(doubleOfArr);\r\n// [2, 4, 6, 8, 10, 12, 14, 16,18]\r\n\r\nvar tripleOfArr = map(tripleOf)(arr);\r\nconsole.log(tripleOfArr);\r\n// [3, 6, 9, 12, 15, 18, 21, 24, 27]\r\n</pre><p>Bạn thấy đấy, chính vì đặc điểm một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;có thể được xem là một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">giá trị</code>. Chúng ta có thể kết hợp các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;với nhau để tạo ra một logic hoạt động rất linh hoạt. Hàm&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">map</code>&nbsp;trong ví dụ ở trên chỉ biểu thị liên hệ giữa hàm&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">func</code>, mảng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">arr</code>, và kết quả&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">đích đến</code>&nbsp;là một mảng mới nào đó. Tuy nhiên logic dẫn đường từ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">arr</code>&nbsp;tới mảng kết quả sẽ còn phụ thuộc vào việc chúng ta truyền&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;nào vào vị trí của&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">func</code>.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><p>Như vậy chúng ta cũng có thể thấy, thực ra trọng tâm của code&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;là biểu thị các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">giá trị</code>. Ngoài các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">giá trị thông thường</code>&nbsp;mang ý nghĩa là dữ liệu thì bây giờ chúng ta còn biết thêm các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">giá trị trừu tượng</code>&nbsp;chính là các hàm. Bên cạnh đó, hướng tư duy&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;còn rất quan tâm tới việc biểu thị các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">tập giá trị</code>. Chúng ta có thể truyền một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">tập giá trị</code>&nbsp;rộng vô hạn vào một lời gọi hàm để được chỉ dẫn tới một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">tập giá trị</code>&nbsp;đích cũng có độ rộng vô hạn.</p><p>Đối với cách sử dụng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;như thế này, các ngôn ngữ chủ điểm hỗ trợ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;sẽ triển khai sẵn một tính năng tên là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Lazy Evaluation</code>&nbsp;- tạm dịch là chế độ tính toán trễ - để trì hoãn việc thực hiện tính toán ngay tại thời điểm gọi hàm với một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">tập giá trị vô hạn</code>&nbsp;như vậy. Và chỉ khi chúng ta cần lấy ra một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">khoảng giá trị hữu hạn</code>&nbsp;từ tập kết quả thì tiến trình tính toán mới thực sự được thực hiện. Còn trong JavaScript thì chúng ta sẽ cần nhờ tới các hàm&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">generator</code>&nbsp;và tự xây dựng hàm truy xuất các khoảng giá trị con với cách viết code triển khai rất...&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><pre class=\"ql-syntax\" spellcheck=\"false\">const range = function (min) {\r\n   return function* (max) {\r\n      while (min &lt;= max) {\r\n         yield min;\r\n         min += 1;\r\n      }\r\n   } // return\r\n}; // range\r\n\r\nconst take = function (n) {\r\n   return function (range) {\r\n      var first = range.next().value;\r\n\r\n      if (n == 0)          return [];\r\n      if (\'normal-case\')   return [first, ...take(n-1)(range)];\r\n   }\r\n}; // take\r\n\r\nvar positiveInt = range(1)(Infinity);\r\nvar oneToNine = take(9)(positiveInt);\r\nconsole.log(oneToNine);\r\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n</pre><p>Trên thực tế thì việc viết định nghĩa để mô tả và sử dụng các miền giá trị vô hạn như trên trong JavaScript - sẽ cần thêm thao tác thiết lập lại&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">generator</code>&nbsp;mỗi khi&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">take</code>. Tuy nhiên thì ở đây chúng ta chỉ tạm tập trung vào minh họa khái niệm&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Lazy Evaluation</code>&nbsp;để hiểu hơn về lối tư duy&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;thôi.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><h3><strong>c. Trạng Thái &amp; Bất Biến</strong></h3><p>Chính bởi vì vị trí đặc trưng của&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">procedural</code>&nbsp;là tiếp giáp tới những nơi lưu dữ liệu tương tác hay trạng thái&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">state</code>; Kết quả hoạt động của một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ tục</code>&nbsp;thường sẽ thường mang tính điều kiện và phụ thuộc vào những yếu tố khác bên ngoài.</p><p>Chúng ta có thể thực hiện nhiều lần truy vấn tới cùng một thành phần&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">input</code>&nbsp;của một giao diện web và nhận được kết quả mỗi lần mỗi khác, tùy vào tương tác của người dùng. Chúng ta cũng có thể gửi nhiều lần yêu cầu truy vấn cùng một bản ghi tới cơ sở dữ liệu và nhận được kết quả mỗi lần mỗi khác tùy vào những cập nhật xảy ra trong cơ sở dữ liệu xen giữa các lần truy vấn.</p><p>Trong khi đó thì các lời gọi một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;với cùng một dữ kiện đầu vào, sẽ luôn luôn trỏ tới chính xác một kết quả đích đến. Với một giá trị&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">A</code>&nbsp;ban đầu, sau một lộ trình di chuyển qua các nút giá trị, chắc chắn chúng ta sẽ chỉ tìm thấy một giá trị&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Z</code>&nbsp;duy nhất, kết quả này sẽ luôn đúng với 1001 lần vận hành code&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>. Điều này sẽ giúp chúng ta duy trì được kết quả hoạt động của code dễ phỏng đoán, và việc kiểm tra hay sửa lỗi logic cũng sẽ rất thuận lợi.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><p>Do đó nên khi muốn áp dụng lối tư duy&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;trong JavaScript, chúng ta sẽ luôn luôn cần cố gắng không chạm vào các thao tác thay đổi giá trị của bất kỳ biến nào xuất hiện trong code. Và trong cả việc lựa chọn các phương thức làm việc với các nút dữ liệu cũng cần tránh sử dụng những phương thức can thiệp vào nội dung của các đối tượng dữ liệu. Nói ngắn gọn hơn là chúng ta cần đảm bảo các giá trị đều bất biến&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">immutable</code>.</p><pre class=\"ql-syntax\" spellcheck=\"false\">var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\nconsole.log(\'=== tạo ra mảng mới từ mảng arr và các phần tử muốn bổ sung\');\r\nvar paddedArr = [0, ...arr, 10];\r\n\r\nconsole.log(arr);\r\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nconsole.log(paddedArr);\r\n// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nconsole.log(\'=== tạo ra mảng mới từ paddedArr bớt đi phần tử đầu tiên\');\r\nvar trimmedLeft = paddedArr.slice(1);\r\n\r\nconsole.log(paddedArr);\r\n// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nconsole.log(trimmedLeft);\r\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nconsole.log(\'=== tạo ra mảng mới từ paddedArr bớt đi phần tử cuối cùng\');\r\nvar trimmedRight = paddedArr.slice(0, -1);\r\n\r\nconsole.log(paddedArr);\r\n// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nconsole.log(trimmedRight);\r\n// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n</pre><h3><strong>d. Nối Tiếp &amp; Kết Hợp</strong></h3><p>Để chuyển tiếp kết quả hoạt động từ một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ tục</code>&nbsp;này tới một&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ tục</code>&nbsp;khác, chúng ta không cần làm thao tác gì đặc biệt cả. Bởi vì các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ tục</code>&nbsp;đều là các thao tác khách quan tác động lên các đối tượng dữ liệu. Do đó chúng ta chỉ cần cung cấp các địa chỉ tham chiếu cho các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">thủ tục</code>&nbsp;để tìm tới và xử lý dữ liệu giống như trong ví dụ mà chúng ta đã có trước đó với các lời gọi nối tiếp&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">chaining</code>.</p><pre class=\"ql-syntax\" spellcheck=\"false\">void function main() {\r\n   var a = { value: null };\r\n   var b = { value: null };\r\n   var result = { value: null };\r\n   \r\n   getUserInput(a, b);\r\n   calculate(a, b, result);\r\n   updateView(result);\r\n} (); // chạy chương trình\r\n\r\n...\r\n</pre><p>Ở đây chúng ta thấy các thủ tục&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">getUserInput</code>,&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">calculate</code>, và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">updateView</code>&nbsp;sẽ lần lượt tìm tới các đối tượng dữ liệu&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">a</code>,&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">b</code>, và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">result</code>&nbsp;để thao tác đọc hoặc chỉnh sửa các giá trị&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">value</code>.</p><p>Trong khi đó, để chuyển tiếp kết quả hoạt động giữa các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">hàm</code>&nbsp;thì chúng ta có thể biểu thị sự kết hợp&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">composition</code>&nbsp;các chặng đường thành một lộ trình&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">đầu -&gt; cuối</code>&nbsp;rồi sau đó thực hiện gọi hàm bằng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">reduce</code>.</p><pre class=\"ql-syntax\" spellcheck=\"false\">const add_1 = function(x) {\r\n   return x + 1;\r\n};\r\n\r\nconst multiply_2 = function(x) {\r\n   return x * 2;\r\n};\r\n\r\nconst subtract_3 = function(x) {\r\n   return x - 3;\r\n};\r\n\r\nconst power_4 = function(x) {\r\n   return x ** 4;\r\n};\r\n\r\nvar one = 1;     // xuất phát từ 1\r\n\r\nvar route = [\r\n   add_1,        // đi tới 2\r\n   power_4,      // đi tới 16\r\n   multiply_2,   // đi tới 32\r\n   subtract_3,   // đi tới 29\r\n];\r\n\r\nvar target = route.reduce((x, f) =&gt; f(x), one);\r\n\r\nconsole.log(one);   // 1\r\nconsole.log(target);   // 29\r\n</pre><p>Ở các ngôn ngữ chủ điểm hỗ trợ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">functional</code>&nbsp;người ta còn cung cấp thêm cách viết biểu thị sự kết hợp của các hàm theo dạng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">biểu thức</code>&nbsp;thông thường. Tuy nhiên trong JavaScript thì chúng ta có thể sử dụng cách viết như trên để theo dõi tuần tự của code từ trên xuống cũng được.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><pre class=\"ql-syntax\" spellcheck=\"false\">fn = add_1 . power_4 . multiply_2 . subtract_3\r\nfn 1\r\n-- 29\r\n</pre><h2><strong>Một số đặc tính chung khác</strong></h2><p>Ngoài những đặc tính đã nêu trên thì các ngôn ngữ lập trình hiện đại đều cố gắng hỗ trợ một số tính năng chung để đáp ứng với nhu cầu xây dựng những phần mềm có kiến trúc phức tạp. Những đặc tính này có thể kể tên là - Trừu Tượng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Abstraction</code>, Đóng Gói&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Encapsulation</code>, Kế Thừa&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Inheritance</code>, và Đa Hình&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Polymorphism</code>.</p><p>Đây là các đặc tính chung trong thiết kế phần mềm chứ không bị giới hạn ở của riêng ngôn ngữ hay mô hình lập tình nào cả. Tuy nhiên do bài viết này tới đây đã hơi quá dài nên chúng ta sẽ tạm chưa quan tâm tới việc thể hiện chúng trong&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">PP (Procedural Programming)</code>&nbsp;hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">FP (Functional Programming)</code>&nbsp;như thế nào.</p><p>Các thuật ngữ này rất phổ biến trong&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">OOP (Object-Oriented Programming)</code>&nbsp;và nhiều khi được hiểu nhầm thành đặc tính riêng của mô hình lập trình này; Và tiện thể khi nói tới&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">OOP</code>&nbsp;ở bài viết sau thì chúng ta sẽ nói về chúng. Khi chúng ta hiểu cách mà những đặc tính này được biểu thị trên nền móng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">OOP</code>&nbsp;thì chúng ta cũng sẽ biết cách để có thể mang chúng tới&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">FP</code>&nbsp;hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">PP</code>, hay bất kỳ đâu mà chúng ta cần, với tất cả những khả năng mà một ngôn ngữ hay một môi trường vận hành cung cấp.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><h2><strong>Kết thúc bài viết</strong></h2><p>Bài viết giới thiệu về hai khía cạnh tư duy&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Procedural &amp; Functional</code>&nbsp;của chúng ta đến đây là kết thúc. Trong bài sau, chúng ta sẽ cùng tản mạn về&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Object-Oriented Programming</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Agent-Oriented Programming</code>. Còn bây giờ thì đã đến lúc nghỉ giải lao rồi. Hẹn gặp lại bạn trong bài viết tiếp theo.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><p>(Chưa đăng tải)&nbsp;<a href=\"https://viblo.asia/p/gDVK2r2XKLj\" target=\"_blank\" style=\"background-color: initial; color: rgb(43, 109, 173);\"><strong>[JavaScript] Bài 25 - Object-Oriented &amp; Agent-Oriented</strong></a></p>',1,'2022-04-12 08:48:56','2022-04-12 08:48:56',NULL),(7,2,'[JavaScript] Bài 23 - Imperative & Declarative','JavaScript_Bai_23_-_Imperative_and_Declarative','','/images/posts/2/aaron-burden-9zsHNt5OpqE-unsplash_2192022T145455_3122022T15522.jpg','<p><br></p><p>Nhóm nội dung cuối cùng trong&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Sub-Series JavaScript</code>&nbsp;của chúng ta là thảo luận về các mô hình lập trình&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Programming Paradigm</code>&nbsp;phổ biến - hay có thể hiểu nôm na là các phương thức tư duy tổng quan khi lập trình phần mềm. Nếu như bạn thử Google với từ khóa&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">programming paradigms</code>&nbsp;thì chắc chắn là bạn sẽ được giới thiệu tới liên kết gần nhất là Wikipedia với một danh sách các&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">paradigm</code>&nbsp;rất dài. Tuy nhiên chúng ta sẽ chỉ cần quan tâm tới một vài mô hình lập trình phổ biến nhất được liệt kê dưới đây -</p><pre class=\"ql-syntax\" spellcheck=\"false\">+-------------------------------------------+\r\n|   Data-Driven       &amp;   Event-Driven      |\r\n|   Reflective        &amp;   Reactive          |\r\n|   Object-Oriented   &amp;   Agent-Oriented    |\r\n|   Procedural        &amp;   Functional        |\r\n|   Imperative        &amp;   Declarative       |\r\n+-------------------------------------------+\r\n</pre><p>Và ở đây, trong bài viết này, chúng ta sẽ khởi đầu với 2 mô hình lập trình&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Imperative Programming</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Declarative Programming</code>&nbsp;- tạm dịch là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">tư duy lập trình tuần tự</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">tư duy lập trình định nghĩa</code>. Trên thực tế thì nếu như bạn Google Translate từ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>&nbsp;sẽ có ý nghĩa là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">mệnh lệnh</code>, còn&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">declarative</code>&nbsp;sẽ được dịch là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">khai báo</code>. Bạn có thể tạm giữ một chút băn khoăn về phần dịch nghĩa này và tự chọn lựa cái nào phù hợp với cách hiểu của bạn sau khi chúng ta thảo luận xong.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><h2><strong>Tại sao chúng ta nên tìm hiểu về các mô hình lập trình?</strong></h2><p>Bởi vì việc vông việc lập trình nói chung về cơ bản là truyền tải tiến trình logic trong tâm trí của chúng ta trở thành một giải pháp phần mềm trong máy tính; Do đó yếu tố căn bản nhất và có ảnh hưởng nhiều nhất đến tiến trình tạo ra phần mềm của chúng ta - là phương thức tư duy mà chúng ta lựa chọn để chuyển tải ý tưởng thành code. Nếu như chúng ta có thể nhìn một vấn đề theo nhiều khía cạnh khác nhau, thì điều đó cũng có nghĩa là chúng ta sẽ có nhiều lựa chọn hơn ở mỗi thời điểm.</p><p>Hiển nhiên là sẽ không có thứ gì thực sự là tốt nhất trong mọi tình huống. Tuy nhiên ứng với mỗi trường hợp cụ thể, chúng ta sẽ có thể chọn ra được những cách thức phù hợp nhất để chuyển tải ý tưởng của mình thành những đoạn code.</p><blockquote>Khả năng thay đổi tư duy và cách thức nhìn nhận vấn đề thực sự đáng giá hơn rất nhiều so với điểm số IQ.</blockquote><blockquote><em>_Alan Kay</em></blockquote><p>Và hơn thế nữa, mỗi một mô hình lập trình cũng giống như mỗi một khái niệm khác mà chúng ta đã được biết - đều được gắn liền với cuộc sống thường nhật của chúng ta. Bởi tất cả chỉ là một - cách thức mà logic trong tâm trí của chúng ta được thể hiện vào trong code cũng là những dạng thức&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">pattern</code>&nbsp;mà tâm trí tự nó đưa ra những nhận định, phân tích về môi trường sống xung quanh. Đâu đó, có lẽ việc tìm hiểu về các mô hình lập trình cũng sẽ giúp cho chúng ta hiểu được phần nào về cách thức mà ơn trên sắp xếp và xoay vần dòng chảy cuộc sống.</p><h2><strong>Nếu vậy có nghĩa là chúng ta đã và đang sử dụng các mô hình này từ trước đến giờ mà không biết?</strong></h2><p>Đúng là như vậy. Mỗi một mô hình lập trình, nếu như được hiểu theo một cách khác thì chỉ đơn giản là một khía cạnh tư duy hay nền móng tư duy để viết ra một đoạn code; và nếu ở trên một bình diện lớn hơn thì là để cấu trúc nên một phần mềm. Việc tìm hiểu các mô hình lập trình về cơ bản không phải là học những kiến thức mới, mà là nhận diện và đặt tên cho những thứ mà chúng ta đã biết; Và sau đó chúng ta sẽ có thể nhìn nhận một tác vụ cần thực hiện trong phần mềm một cách rành mạch hơn. Bây giờ thì chúng ta hãy bắt đầu thôi.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><p><br></p><h2><strong>Tuần Tự &amp; Định Nghĩa</strong></h2><p><code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Imperative Programming</code>&nbsp;có thể hiểu nôm na là khi chúng ta nhìn nhận một chương trình là một tuần tự các câu lệnh chỉ dẫn cho máy tính việc cần làm là gì? - hay trình tự các bước để thực hiện một công việc&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">như thế nào?</code></p><p>Trong khi đó&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Declarative Programming</code>&nbsp;ở một khía cạnh khác lại là câu chuyện - chúng ta cần phải định nghĩa hay giải thích cho máy tính hiểu được mục tiêu hay kết quả mà chúng ta đang hướng đến&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">là cái gì?</code></p><p>Chúng ta sẽ thử lấy một ví dụ đơn giản về một hàm&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">sumArray</code>&nbsp;tính tổng một mảng số nguyên bất kỳ; Và trước tiên sẽ là lối tư duy tuần tự&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>&nbsp;-</p><pre class=\"ql-syntax\" spellcheck=\"false\">var numberArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\nfunction sumArray(arr) {\r\n   var total = 0;\r\n   \r\n   for (var num of arr) {\r\n      total += num;\r\n   }\r\n   \r\n   return total;\r\n}; // sumArray\r\n\r\nconsole.log( sumArray(numberArray) );\r\n// 45\r\n</pre><p>Trong code ví dụ ở trên thì chúng ta đã chỉ ra cho máy tính tuần tự công việc được thực hiện như sau -</p><ul><li>Khởi tạo một cái hộp rỗng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">total</code>&nbsp;giả định là tổng xuất phát ban đầu là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">0</code>.</li><li>Sau đó tìm tới mảng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">arr</code>&nbsp;để lấy ra phần tử đầu tiên và cộng gộp vào&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">total</code></li><li>Sau đó lại tiếp tục lấy ra phần tử thứ hai, thứ ba... và cộng gộp dần dần vào&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">total</code></li><li>Tới khi cộng gộp xong lần lượt tất các phần tử vào&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">total</code>&nbsp;thì có nghĩa là chúng ta đã thu được tổng cần tính.</li></ul><p>Và code ví dụ dưới đây là ở một khía cạnh tư duy khác -&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">declarative</code>, khi chúng ta suy nghĩ về việc giải thích cho máy tính hiểu tổng mà chúng ta cần tính&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">là cái gì?</code>&nbsp;-</p><pre class=\"ql-syntax\" spellcheck=\"false\">let numberArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\nconst sumOf = function(arr) {\r\n   let [first, ...rest] = arr\r\n\r\n   if (arr.length == 0)    return 0;\r\n   if (\'in-normal-case\')   return first + sumOf(rest);\r\n}; // sumOf\r\n\r\nconsole.log( sumOf(numberArray) );\r\n// 45\r\n</pre><p>Tổng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">sumOf</code>&nbsp;của một mảng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">arr</code>&nbsp;có thể hiểu đơn giản là - giá trị của phần tử đầu tiên&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">first</code>&nbsp;đem cộng gộp với tổng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">sumOf</code>&nbsp;của mảng con chứa tất cả các phần tử còn lại&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">rest</code>. Định nghĩa này hiển nhiên là đúng và chúng ta thấy rất rõ ràng và dễ hiểu. Cụ thể là tổng của mảng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">[1 -&gt; 9]</code>&nbsp;thì hiển nhiên là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">1</code>&nbsp;cộng với tổng của mảng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">[2 -&gt; 9]</code>.</p><p>Tuy nhiên định nghĩa đó vẫn chưa đầy đủ và phù hợp cho mọi tình huống. Cụ thể là khi mảng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">arr</code>&nbsp;không có phần tử nào thì chúng ta sẽ không thể nói như vậy được. Do đó chúng ta cần phải bổ sung vào định nghĩa này thêm một chút để đảm bảo trong trường hợp nào thì máy tính cũng sẽ không gặp khó.</p><p>Tổng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">sumOf</code>&nbsp;của một mảng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">arr</code>&nbsp;còn có thể là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">0</code>&nbsp;trong trường hợp mảng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">arr</code>&nbsp;không có phần tử nào cả.</p><p>Sau khi đã bổ sung định nghĩa xong kín kẽ rồi thì công việc tính toán là của máy tính thôi, chúng ta không cần phải bận tâm tới nữa.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><p>Trích đoạn bài viết&nbsp;<a href=\"https://viblo.asia/p/63vKjAaR52R\" target=\"_blank\" style=\"background-color: initial; color: rgb(43, 109, 173);\"><strong>[JavaScript] Bài 11 - Hàm &amp; Vùng</strong></a>&nbsp;-</p><pre class=\"ql-syntax\" spellcheck=\"false\">[ Máy tính ] \"Tổng của mảng [1, 2, 3, 4, 5, 6, 7, 8, 9] là gì?\"\r\n[Người dùng] \"Ủa, tưởng giỏi tính toán hơn tôi. Sao hỏi kỳ thế?\"\r\n[ Máy tính ] \"Tôi giỏi tính toán chứ không giỏi tiếng Việt.  \r\n              Tổng đấy là cái gì thế?\"\r\n[Người dùng] \"Ừ thì là: 1 + tổng của mảng [2, 3, 4, 5, 6, 7, 8, 9]\"\r\n[ Máy tính ] \"Ok, đó là bước 1. Cái đoạn `1 +` thì tôi biết rồi.  \r\n              Nhưng tổng của mảng còn lại là cái gì?\"\r\n[Người dùng] \"Ừ thì là: 2 + tổng của mảng [3, 4, 5, 6, 7, 8, 9]\"\r\n[ Máy tính ] \"Ok, đó là bước 2. Cái đoạn `2 +` thì tôi biết rồi.  \r\n              Nhưng tổng của mảng còn lại là cái gì?\"\r\n[Người dùng] \"Ừ thì là: 3 + tổng của mảng [4, 5, 6, 7, 8, 9]\"\r\n. . .\r\n. . .\r\n[ Máy tính ] \"Ok, đó là bước 8. Cái đoạn `8 +` thì tôi biết rồi.  \r\n              Nhưng tổng của mảng còn lại là cái gì?\"\r\n[Người dùng] \"Ừ thì là: 9 + tổng của mảng []\"\r\n[ Máy tính ] \"Ok, đó là bước 9.  Cái đoạn `9 +` thì tôi biết rồi.\r\n              Nhưng tổng của mảng [] là cái gì?\"\r\n[Người dùng] \"Là 0. Có gì đâu để mà tính. Thế ra kết quả chưa?\"\r\n\r\n[ Máy tính ] \"Từ từ để tôi quay lại bước 9 đã... Tổng là 9.\"\r\n[Người dùng] \"Tôi đang hỏi cái tổng của mảng ban đầu. =,=\"\r\n[ Máy tính ] \"Từ từ để tôi quay lại bước 8 đã... Tổng là 17.\"\r\n[Người dùng] \"Tôi đang hỏi cái tổng của mảng ban đầu. =,=\"\r\n. . .\r\n. . .\r\n[ Máy tính ] \"Từ từ để tôi quay lại bước 2 đã... Tổng là ...\"\r\n[Người dùng] \"Tôi đang hỏi cái tổng của mảng ban đầu. =,=\"\r\n[ Máy tính ] \"Từ từ để tôi quay lại bước 1 đã... Tổng là 45.\r\n              Kết quả cuối cùng rồi đấy.\"\r\n\r\n[Người dùng] \"Ok, thế bây giờ tính giúp tôi tổng của mảng  \r\n              [1, 2, 3, ..., 100_000] được không?\"\r\n[ Máy tính ] \"Tôi chỉ nhớ được khoảng 10_000 bước thôi. =,=\"\r\n</pre><h2><strong>Một chút suy nghĩ</strong></h2><p>Hai mô hình lập trình đầu tiên mà chúng ta tìm kiếm tên gọi để nhận diện ở đây cũng là hai khía cạnh tư duy căn bản, tương ứng với 2 dạng câu hỏi thường nhật mà tâm trí của chúng ta phải đáp ứng với mỗi tác vụ công việc cần thực hiện hàng ngày -&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Như thế nào?</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Là cái gì?</code>.</p><p>Thực tế thì câu hỏi&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Là cái gì?</code>&nbsp;luôn luôn là câu hỏi tới trước, bởi nó biểu thị cho khoảnh khắc khi mà tâm trí của chúng ta đang đứng ở vị trí quan sát bên ngoài công việc cần thực hiện. Tuy nhiên trải nghiệm cuộc sống của chúng ta lại được trực tiếp gom góp trong tiến trình làm việc, do đó nên câu hỏi&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Như thế nào?</code>&nbsp;dường như được chú ý nhiều hơn cả.</p><p>Đây là lý do các ngôn ngữ lập trình phổ biến đều hỗ trợ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Imperative Programming</code>&nbsp;trước hết; Hoặc cũng có thể là ngược lại - những ngôn ngữ chủ điểm hỗ trợ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Imperative Programming</code>&nbsp;thì mới có thể trở nên phổ biến.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\">&nbsp;Và JavaScript là một trong số đó, với các từ khóa mang ý nghĩa giải thích tuần tự logic cần thực hiện, và cả những công cụ khác nữa. Vì vậy nên mặc dù với mục đích là truyền đạt lối biểu thị&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">declarative</code>&nbsp;trong code thì chúng ta vẫn sẽ không thể viết như thế này -</p><pre class=\"ql-syntax\" spellcheck=\"false\">sumOf []   is   0\r\nsumOf [first, ...rest]   is   first + sumOf rest\r\n</pre><p>Tuy nhiên thì điều đó có lẽ là không quan trọng lắm. Ý nghĩa của một từ khóa nhiều khi sẽ là do chúng ta quy ước trong logic nội tại của mình. Và đối với mỗi từ khóa&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">if</code>&nbsp;trong code&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">declarative</code>&nbsp;ở phía trên, bạn hãy cứ xem như đó là một ký hiệu giúp tránh phải viết lặp lại tên hàm&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">sumOf</code>&nbsp;cũng được.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><h2><strong>Vậy JavaScript có hỗ trợ&nbsp;</strong><code style=\"background-color: rgb(238, 238, 238); color: inherit;\"><strong>declarative</strong></code><strong>?</strong></h2><p>Chắc chắn là có. Như đã nói ở trên thì&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">declarative</code>&nbsp;là một khía cạnh tư duy căn bản luôn luôn đứng ngay sát cạnh&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>. Một đặc điểm điển hình của&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">declarative</code>&nbsp;đó là lối viết&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">diễn dịch</code>&nbsp;- có nghĩa là chúng ta cứ đưa ra một định nghĩa trừu tượng hay sử dụng một cái tên nào đó trước, rồi mới thể hiện chi tiết diễn giải về cái tên đó ở phía sau. JavaScript cũng như nhiều ngôn ngữ khác có cho phép chúng ta gọi và sử dụng một hàm đứng trước phần code định nghĩa để tạo ra hàm đó.</p><p>Ở các ngôn ngữ có nền móng chủ điểm là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">declarative</code>&nbsp;và sử dụng ít code&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>&nbsp;hơn, thì chúng ta sẽ có thêm các cú pháp&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">binding</code>&nbsp;để định nghĩa hay giải thích các yếu tố đã được sử dụng trước đó.</p><pre class=\"ql-syntax\" spellcheck=\"false\">-- thể tích của một chiếc hộp có các cạnh a, b, c\r\n-- là diện tích của mặt chứa các cạnh (a, b) nhân với c\r\nboxVolume a b c = area * c\r\n   -- giải thích về diện tích area ở dòng trên\r\n   where area = a * b\r\n</pre><h2><strong>Một vài công cụ&nbsp;</strong><code style=\"background-color: rgb(238, 238, 238); color: inherit;\"><strong>imperative</strong></code><strong>&nbsp;chưa nhắc đến</strong></h2><p>Giống với các ngôn ngữ lập trình phổ biến khác, do trọng tâm ban đầu là tính tuần tự của các câu lệnh cần thực hiện nên JavaScript có cung cấp thêm các công cụ giúp chúng ta thay đổi trình tự thực hiện của các câu lệnh khi cần thiết. Điều này nhằm mục đích cho phép tạo ra logic hoạt động đa dạng hơn cho code và cung cấp nhiều khả năng hơn để chúng ta chuyển tải các ý tưởng thành phần mềm.</p><p>Xuyên suốt&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Sub-Series JavaScript</code>&nbsp;của chúng ta ở đây thì chỉ có duy nhất từ khóa&nbsp;<code style=\"color: rgb(43, 109, 173); background-color: rgb(238, 238, 238);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\" target=\"_blank\">break</a></code>&nbsp;trong cấu trúc điều kiện&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">switch</code>&nbsp;là được thiết kế với mục đích như vậy. Chúng ta cũng có thể sử dụng&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">break</code>&nbsp;để rời khỏi một vòng lặp&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">for</code>&nbsp;hay&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">while</code>&nbsp;trước khi chu trình lặp kết thúc. Và như vậy là tuần tự của công việc đang thực hiện có thể được thay đổi linh hoạt hơn để nhằm đáp ứng một logic nào đó khi cần thiết.</p><p>Bên cạnh đó thì&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">JavaScript</code>&nbsp;còn 2 công cụ nữa là từ khóa&nbsp;<code style=\"color: rgb(43, 109, 173); background-color: rgb(238, 238, 238);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\" target=\"_blank\">continue</a></code>&nbsp;và các nhãn&nbsp;<code style=\"color: rgb(43, 109, 173); background-color: rgb(238, 238, 238);\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\" target=\"_blank\">label</a></code>. Trong đó thì&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">continue</code>&nbsp;sẽ giúp chúng ta&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">break</code>&nbsp;nhè nhẹ qua một lần lặp và sau đó vẫn tiếp tục thực hiện tiếp chu trình lặp; Còn các nhãn&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">label</code>&nbsp;thì sẽ giúp chúng ta đặt tên cho một khối lệnh để&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">break</code>&nbsp;có thể xác định phạm vi và thoát ra ngoài khối lệnh đó. Điểm hữu dụng là ở chỗ cho dù có bao nhiêu khối lệnh xếp chồng bên ngoài thì cũng không quan trọng,&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">break labelName;</code>&nbsp;sẽ chỉ đơn giản là nhảy ra khỏi phạm vi của khối lệnh mà nó đã xác định.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><p>Lý do mà mình không đưa các công cụ này vào phần nội dung chính của&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Sub-Series JavaScript</code>&nbsp;là vì các công cụ này thực sự không phải là bắt buộc hay quá cần thiết. Trong khi đó thì JavaScript cung cấp cho chúng ta rất nhiều phương thức khác để thể hiện công việc cần thực hiện với logic của code dễ theo dõi hơn. Bởi vì dù gì ở khía cạnh&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imperative</code>, điều mà chúng ta mong muốn nhất vẫn là code có tuần tự dễ theo dõi và phỏng đoán kết quả hoạt động.</p><h2><strong>Một vài đặc tính cơ bản</strong></h2><p>Và ở đây chúng ta sẽ liệt kê một số đặc tính cơ bản của&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Imperative Programming</code>&nbsp;và&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Declarative Programming</code>&nbsp;để hiểu hơn về tiến trình tư duy logic của chính mình.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><p><code style=\"background-color: rgb(238, 238, 238); color: inherit;\">imprative</code></p><ul><li>Trình tự của các câu lệnh&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">có</code>&nbsp;phản ánh logic vận hành của code.</li><li>Thường xuyên cần phải tạo ra các biến tạm để gom dần kết quả của tiến trình vận hành được viết ra sau đó, đặc biệt là các thao tác vòng lặp. Do đó sẽ thường có thao tác thay đổi giá trị của các biến hay trạng thái&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">state</code>.</li><li>Nội dung của code là chỉ ra&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">tuần tự</code>&nbsp;các bước cần thực hiện để đạt được mục tiêu&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">như thế nào?</code></li></ul><p><code style=\"background-color: rgb(238, 238, 238); color: inherit;\">declarative</code></p><ul><li>Trình tự của các câu lệnh&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">không</code>&nbsp;phản ánh logic vận hành; Bởi vì chúng ta thường viết code sử dụng trước rồi mới định nghĩa giải thích sau.</li><li>Cung cấp định nghĩa thay vì hướng dẫn máy tính thực hiện công việc. Do đó không có hướng dẫn&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">vòng lặp</code>&nbsp;mà thay vào đó là các định nghĩa&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">đệ quy</code>. Cũng vì vậy nên không cần tạo ra các biến tạm để gom kết quả vận hành từng bước của vòng lặp.</li><li>Nội dung của code là&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">định nghĩa</code>&nbsp;mối liên hệ tương quan giữa các thành phần để khiến cho mục tiêu được thành hình và để máy tính hiểu được đó&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">là cái gì?</code></li></ul><p>Và đối với chúng ta, điểm chung tuyệt vời hơn cả của hai mô hình lập trình này đó là đều được hỗ trợ bởi JavaScript. Chúng ta có thể kết hợp cả 2 khía cạnh tư duy này khi thể hiện ý tưởng công việc cần thực hiện vào code.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><h2><strong>Kết thúc bài viết</strong></h2><p>Trong bài viết tiếp theo, chúng ta sẽ thảo luận về hai mô hình lập trình&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Procedural &amp; Functional</code>. À không. Từ bây giờ chúng ta không dùng từ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">mô hình lập trình</code>&nbsp;nữa được không?&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\">&nbsp;Chúng ta sẽ chỉ gọi là những khía cạnh tư duy thôi, như vậy nghe đỡ&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">bác học</code>&nbsp;hơn và thân thiện hơn.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p><p>Vậy đấy, những bài viết cuối cùng trong&nbsp;<code style=\"background-color: rgb(238, 238, 238); color: inherit;\">Sub-Series JavaScript</code>&nbsp;của chúng ta về cơ bản chỉ là những câu chuyện tản mạn. Vì toàn là những thứ chúng ta đã biết cả rồi mà.&nbsp;<img src=\"https://twemoji.maxcdn.com/2/72x72/1f604.png\" alt=\"?\"></p>',1,'2022-04-12 08:52:02','2022-04-12 08:52:02',NULL),(10,3,'Khai báo constants trong ES6','Khai_bao_constants_trong_ES6','','/images/posts/3/5a30635a37c3d59edfd2790322fccc12_2222022T181512_3122022T155650.jpg','<h1><br></h1><p><br></p><h3><strong>Giới thiệu về từ khóa const trong JavaScript</strong></h3><p>ES6 cung cấp một cách để khai báo một constant bằng việc sử dụng kerword const. Keyword const tạo một tham chiếu chỉ đọc cho một giá trị.</p><pre class=\"ql-syntax\" spellcheck=\"false\">const CONSTANT_NAME = value;\r\n</pre><p>Theo quy ước thì các constants sẽ được viết hoa và cách nhau giữa các từ bởi dấu gạch chân.</p><p>Giống như keyword let, keyword const khai báo biến kiểu blocked-scope. Tuy nhiên, biến blocked-scope khi khai báo bằng const thì không thể gán lại giá trị.</p><p>Khai báo biến sử dụng keyword let thì bạn có thể thay đổi giá trị của chúng bất kỳ lúc nào bạn muốn như ví dụ sau:</p><pre class=\"ql-syntax\" spellcheck=\"false\">let a = 10;\r\na = 20;\r\na = a + 5;\r\nconsole.log(a); // 25\r\n</pre><p>Tuy nhiên, biến sử dụng keyword const thì không thể thay đổi giá trị. Có nghĩa là bạn không thể gán lại giá trị cho chúng một giá trị khác.</p><pre class=\"ql-syntax\" spellcheck=\"false\">const RATE = 0.1;\r\nRATE = 0.2; // TypeError\r\n</pre><p>Khi khai báo biến sử dụng keyword const bạn bắt buộc phải khởi tạo giá trị ban đầu cho chúng,nếu không nó sẽ hiển thị lỗi</p><pre class=\"ql-syntax\" spellcheck=\"false\">const RED; // SyntaxError\r\n</pre><p><br></p><h3><strong>JavaScript const and Objects</strong></h3><p>Keyword const đảm bảo rằng giá trị của nó chỉ có thể ở trạng thái read-only.Tuy nhiên chúng ta có thể thay đổi giá trị thuộc tính của chúng trong Object như ví dụ bên dưới.</p><pre class=\"ql-syntax\" spellcheck=\"false\">const PERSON = {age: 35};\r\nPERSON.age = 40 //OK\r\nconsole.log(PERSON); //OK\r\n</pre><p>Tuy nhiên bạn không thể gán lại giá trị cho biến PERSON nhé.</p><pre class=\"ql-syntax\" spellcheck=\"false\">const PERSON = {age: 35};\r\nPERSON = {age: 40} // TypeError\r\n</pre><p>Trong trường hợp bạn muốn không cho phép thay đổi giá trị thuộc tính trong biến PERSON thì bạn phải sử dụng method Object.freeze().</p><pre class=\"ql-syntax\" spellcheck=\"false\">const PERSON = Object.freeze({age: 35});\r\nPERSON.age = 40 // TypeError\r\nconsole.log(PERSON); // Output 35\r\n</pre><p>Ví dụ, khai báo biến company với từ khóa constant và sử dụng Object.freeze()</p><pre class=\"ql-syntax\" spellcheck=\"false\">const company = Object.freeze({\r\n    name: \'ABC corp\',\r\n    address: {\r\n        street: \'North 1st street\',\r\n        city: \'San Jose\',\r\n        state: \'CA\',\r\n        zipcode: 95134\r\n    }\r\n});\r\n</pre><p>Nhưng object company.address có thể thay đổi được, bạn có thể thêm mới hoặc cập nhật một thuộc tính vào object company.address như bên dưới.</p><pre class=\"ql-syntax\" spellcheck=\"false\">company.address.country = \'USA\'; // OK\r\ncompany.address.street = \'North 1st street 123\'; // OK\r\n</pre><p><br></p><h3><strong>JavaScript const and Arrays</strong></h3><p>Hãy theo dõi ví dụ bên dưới</p><pre class=\"ql-syntax\" spellcheck=\"false\">const colors = [\'red\'];\r\ncolors.push(\'green\');\r\nconsole.log(colors); // [\"red\", \"green\"]\r\n\r\ncolors.pop();\r\ncolors.pop();\r\nconsole.log(colors); // []\r\n\r\ncolors = []; // TypeError\r\n</pre><p>Ví dụ trên mình khai báo array colors sử dụng từ khóa constant và bạn có thể thêm 1 thành phần vào mảng đó. Những bạn không thể gán lại array colors bằng một giá trị khác.</p><h3><strong>JavaScript const in a for loop</strong></h3><p>ES6 cung cấp một cấu trúc mới được gọi là for......of cho phép bạn tạo một vòng lặp lặp qua các đối tượng có thể lặp lại như arrays, maps,.</p><pre class=\"ql-syntax\" spellcheck=\"false\">let scores = [75, 80, 95];\r\n\r\nfor (let score of scores) {\r\n	console.log(score);\r\n}\r\n</pre><p>Nếu bạn không có ý định sửa đổi biến score bên trong vòng lặp, bạn có thể sử dụng từ khóa const để thay thế:</p><pre class=\"ql-syntax\" spellcheck=\"false\">let scores = [75, 80, 95];\r\nfor (const score of scores) {\r\n    console.log(score);\r\n}\r\n</pre><p>Trong ví dụ này, for ... of tạo ra một ràng buộc mới cho từ khóa const trong mỗi lần lặp vòng lặp. Nói cách khác, một const score mới được tạo ra trong mỗi lần lặp.</p><p>Lưu ý rằng const sẽ không hoạt động trong vòng lặp for bắt buộc.</p><pre class=\"ql-syntax\" spellcheck=\"false\">for (const i = 0; i &lt; scores.length; i++) { // TypeError\r\n    console.log(scores[i]);\r\n}\r\n</pre><h3><strong>Summary</strong></h3><ul><li>Từ khóa const tạo một tham chiếu chỉ đọc cho một giá trị. Tham chiếu chỉ đọc không thể gán lại giá trị nhưng giá trị có thể thay đổi.</li><li>Các biến khai báo sử dụng từ khóa const thuộc kiểu blocked-scope và không thể khai báo lại.</li></ul><p><br></p>',1,'2022-06-12 08:56:50','2022-04-12 08:56:50',NULL),(11,1,'6 Useful Checklists Every Developer Should Know ??','6_Useful_Checklists_Every_Developer_Should_Know','','/images/posts/1/ack6ix2twgk9wxo9nkoi_3262022T82835.webp','<p><span class=\"ql-size-large\">The product lifecycle often holds us accountable for so many things. Even if you think you are aware of everything, it is always a great practice to double-check, just to be sure.</span></p><p><span class=\"ql-size-large\">In this article, I have compiled some of the most useful checklists. These include everything from design and performance to product launch, marketing strategies, and internet security.</span></p><p><span class=\"ql-size-large\">I will provide the direct link and the description so you can get an insight right away.</span></p><h3>1.&nbsp;<a href=\"https://github.com/thedaviddias/Front-End-Checklist\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Frontend Checklist</a></h3><blockquote>⭐ GitHub stars 59k+</blockquote><p><br></p><h2><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\">&nbsp;<a href=\"https://github.com/thedaviddias\" target=\"_blank\" style=\"color: var(--link-branded-color);\">thedaviddias&nbsp;</a>/&nbsp;<a href=\"https://github.com/thedaviddias/Front-End-Checklist\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Front-End-Checklist</a></h2><h3>? The perfect Front-End Checklist for modern websites and meticulous developers</h3><p>Dozens of best practices of HTML, CSS, JS, Webfonts, Images, Security, Performance, Accessibility, SEO, and many more you don\'t want to miss in your next project.</p><p>For better UI, there is a&nbsp;<a href=\"https://frontendchecklist.io/\" target=\"_blank\" style=\"color: var(--link-branded-color);\">website</a>, as well.</p><h3>2.&nbsp;<a href=\"https://github.com/thedaviddias/Front-End-Design-Checklist\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Design Checklist</a></h3><blockquote>⭐ GitHub stars 4k+</blockquote><p><br></p><h2><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\">&nbsp;<a href=\"https://github.com/thedaviddias\" target=\"_blank\" style=\"color: var(--link-branded-color);\">thedaviddias&nbsp;</a>/&nbsp;<a href=\"https://github.com/thedaviddias/Front-End-Design-Checklist\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Front-End-Design-Checklist</a></h2><h3>? The Design Checklist for Creative Web Designers and Patient Front-End Developers</h3><p>Everything you want to check against the Grid system, Colors, Fonts and Text, Links and Navigation, Images and Icons, Forms and Buttons, Responsive Web Design, and Style Guides.</p><h3>3.&nbsp;<a href=\"https://github.com/thedaviddias/Front-End-Performance-Checklist\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Performance Checklist</a></h3><blockquote>⭐ GitHub stars 14k+</blockquote><p><br></p><h2><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\">&nbsp;<a href=\"https://github.com/thedaviddias\" target=\"_blank\" style=\"color: var(--link-branded-color);\">thedaviddias&nbsp;</a>/&nbsp;<a href=\"https://github.com/thedaviddias/Front-End-Performance-Checklist\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Front-End-Performance-Checklist</a></h2><h3>? The only Front-End Performance Checklist that runs faster than the others</h3><p>Valuable checklist on how to increase performance by various HTML, CSS, and JS tips, Image and Font techniques, Server tricks, and use of Performance tools.</p><h3>4.&nbsp;<a href=\"https://github.com/amilajack/project-checklist\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Launch Checklist</a></h3><blockquote>⭐ GitHub stars 400+</blockquote><p><br></p><h2><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\">&nbsp;<a href=\"https://github.com/amilajack\" target=\"_blank\" style=\"color: var(--link-branded-color);\">amilajack&nbsp;</a>/&nbsp;<a href=\"https://github.com/amilajack/project-checklist\" target=\"_blank\" style=\"color: var(--link-branded-color);\">project-checklist</a></h2><h3>✅ A checklist of things to do before releasing your project</h3><p>A checklist of things to do before releasing your project. You will check your Presentation, Value Proposition, Project Quality, Branding, Onboarding Methods, and Funding models.</p><h3>5.&nbsp;<a href=\"https://draft.dev/learn/marketing-checklist\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Marketing Checklist</a></h3><p>A comprehensive, chronologically ordered list of marketing tactics and ideas that you can try with your startup. Tips on Competitor / Customer research, Email / Blog / Social media setup, Public Relations strategies, Lists of free and paid promotion channels.</p><h3>6.&nbsp;<a href=\"https://github.com/Lissy93/personal-security-checklist\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Personal Security Checklist</a></h3><blockquote>⭐ GitHub stars 7k+</blockquote><p><br></p><h2><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\">&nbsp;<a href=\"https://github.com/Lissy93\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Lissy93&nbsp;</a>/&nbsp;<a href=\"https://github.com/Lissy93/personal-security-checklist\" target=\"_blank\" style=\"color: var(--link-branded-color);\">personal-security-checklist</a></h2><h3>? A curated checklist of 300+ tips for protecting digital security and privacy in 2022</h3><p>A curated checklist of 300+ tips for protecting digital security and privacy in the modern age of the web. Anything from Authentification, Browsing, Social Media and Emails to Mobile Phones, Secure messaging, and Smart Home.</p><p>Writing has always been my passion and it gives me pleasure to help and inspire people. If you have any questions, feel free to reach out!</p><p>Connect me on&nbsp;<a href=\"https://twitter.com/madzadev\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Twitter</a>,&nbsp;<a href=\"https://www.linkedin.com/in/madzadev/\" target=\"_blank\" style=\"color: var(--link-branded-color);\">LinkedIn</a>&nbsp;and&nbsp;<a href=\"https://github.com/madzadev\" target=\"_blank\" style=\"color: var(--link-branded-color);\">GitHub</a>!</p><p>Visit my&nbsp;<a href=\"https://madza.dev/blog\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Blog</a>&nbsp;for more articles like this.</p>',1,'2022-07-26 01:28:35','2022-04-26 01:28:35',NULL),(12,1,'Upload files to AWS S3 in JMeter using Groovy','Upload_files_to_AWS_S3_in_JMeter_using_Groovy','','/images/posts/1/5len4oxu1tyclzknupep_3262022T193423.webp','<p>I use my personal AWS S3 to store all my personal and confidential documents. There are three primary reasons for choosing AWS S3: affordable, speed and reliable. If you are working on the AWS cloud, the usage of S3 is inevitable. S3 plays a critical role in storing objects in hot and cold storage. Sometimes you need to upload a payload or file objects to S3 programmatically via your performance test script. This blog article will help you to upload files to AWS S3 in JMeter using Groovy.</p><h2>What is S3?</h2><p>Amazon Simple Storage Service (Amazon S3) is an object storage service that offers industry-leading scalability, data availability, security, and performance.</p><p>S3 comes with various storage classes: S3 Standard, S3 Intelligent Tiering, S3 Glacier Instant Retrieval and more.</p><h2>Prerequisites</h2><p>The following are the prerequisites for upload files to AWS S3:</p><ul><li>AWS Account</li><li>AWS IAM User with S3 access policy,</li><li>basic knowledge of AWS services,</li><li>basic knowledge of JMeter</li><li>basic knowledge of AWS SDK (Java)</li><li>file(s) to upload</li></ul><h2>AWS IAM User</h2><p>Login into your AWS account and open&nbsp;<strong>IAM&nbsp;</strong>service. Click&nbsp;<strong>Users&nbsp;</strong>under&nbsp;<strong>Access Management</strong>.</p><p>Click&nbsp;<strong>Add users</strong>&nbsp;button to set the user details and credential type as shown below.</p><p>Enter&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">jmeter-s3-access</code>&nbsp;in&nbsp;<strong>User name</strong>&nbsp;and check&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\"><strong>Access key - Programmatic access</strong></code>.</p><p>This user will have access to the AWS service programmatically, not from the user console. Click&nbsp;<strong>Next: Permissions</strong></p><p>In the&nbsp;<strong>Set permissions</strong>&nbsp;section, click&nbsp;<strong>Attach existing policies directly</strong>&nbsp;and filter the policies of S3 by typing&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">s3</code>.</p><p>For the demonstration purpose, let us go with&nbsp;<code style=\"background-color: rgba(0, 0, 0, 0.1); color: var(--color-body-color);\">AmazonS3FullAccess</code>. Check&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">AmazonS3FullAccess</code>&nbsp;and then click&nbsp;<strong>Next: Tags</strong>. But for the production server, follow the zero trust framework.</p><p>Adding tags is optional, but it is recommended to have relevant key-pair values.</p><p>Click&nbsp;<strong>Review&nbsp;</strong>and then click on&nbsp;<strong>Create user</strong>.</p><p>Copy the&nbsp;<strong>Access key ID</strong>&nbsp;and&nbsp;<strong>Secret access key</strong>&nbsp;to a secured location. Alternatively, you can download the .csv file.</p><h2>JMeter Test Plan</h2><p>By default, JMeter doesn\'t have the feature to upload the artifacts to AWS S3. To extend the functionality, we must leverage the JSR223 Sampler.</p><p>Here is the complete playlist of JMeter series which will help you to become a hero within 1 week.</p><p><a href=\"https://www.youtube.com/playlist?list=PLJ9A48W0kpRIjLkZ32Do9yDZXnnm7_uj_\" target=\"_blank\" style=\"color: var(--link-branded-color);\">https://www.youtube.com/playlist?list=PLJ9A48W0kpRIjLkZ32Do9yDZXnnm7_uj_</a></p><h3>JSR223 Sampler</h3><p>It is not possible to write upload to S3 code block natively. We must leverage the latest version of AWS SDK for Java. To add the AWS SDK as a dependency to the JSR223 Sampler, the easiest way is to leverage Grape. Personally, I have not tried the JMeter Maven plugin. I found Grape is simple to get start.</p><h3>What is Grape?</h3><p>The&nbsp;<strong><em>Gr</em></strong><em>oovy&nbsp;</em><strong><em>A</em></strong><em>daptable&nbsp;</em><strong><em>P</em></strong><em>ackaging&nbsp;</em><strong><em>E</em></strong><em>ngine</em>&nbsp;or&nbsp;<strong><em>Gr</em></strong><em>oovy&nbsp;</em><strong><em>A</em></strong><em>dvanced&nbsp;</em><strong><em>P</em></strong><em>ackaging&nbsp;</em><strong><em>E</em></strong><em>ngine</em>, Grape, is a JAR dependency manager which is built-in with Groovy.</p><p>Using the&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">@Grab</code>&nbsp;annotations in JSR223, you can add maven repository dependencies to the classpath.</p><pre class=\"ql-syntax\" spellcheck=\"false\">@Grab(group=\'software.amazon.awssdk\', module=\'s3\', version=\'2.17.172\', scope=\'test\')\r\n</pre><p>The above annotation will download the AWS SDK S3 dependencies. To download multiple dependencies, use&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">@Grapes</code>&nbsp;annotations.</p><pre class=\"ql-syntax\" spellcheck=\"false\">@Grapes(\r\n    @Grab(group=\'software.amazon.awssdk\', module=\'s3\', version=\'2.17.172\', scope=\'test\'),\r\n    @Grab(group=\'software.amazon.awssdk\', module=\'sts\', version=\'2.17.172\', scope=\'test\')\r\n\r\n)\r\n</pre><p>To change the source, use&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">@GrabResolver</code>&nbsp;annotation.</p><pre class=\"ql-syntax\" spellcheck=\"false\">@GrabResolver(name=\'restlet\', root=\'http://maven.restlet.org/\')\r\n</pre><h3>Hello Time using Grape in JSR223</h3><p>Let us understand how Grape works in JSR223 Sampler in JMeter by writing a simple snippet with&nbsp;<a href=\"https://dev.to/grab\" target=\"_blank\" style=\"color: var(--link-branded-color);\">@grab</a>&nbsp;annotations. To explain it with a simple&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">Hello world</code>, pardon&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">Hello time</code>&nbsp;example, let us use the below code snippet. Copy and paste the below code into your JSR223 Sampler in JMeter.</p><pre class=\"ql-syntax\" spellcheck=\"false\">@Grapes(\r\n    @Grab(group=\'joda-time\', module=\'joda-time\', version=\'2.10.14\')\r\n)\r\nimport org.joda.time.LocalDateTime\r\n\r\nLocalDateTime currentDateTime = new LocalDateTime()\r\nlog.info \"Local Time is \" + currentDateTime\r\n</pre><p>Let us slice each line.&nbsp;<a href=\"https://dev.to/grapes\" target=\"_blank\" style=\"color: var(--link-branded-color);\">@grapes</a>&nbsp;is the optional inception annotation which has&nbsp;<a href=\"https://dev.to/grab\" target=\"_blank\" style=\"color: var(--link-branded-color);\">@grab</a>&nbsp;annotation. One or more&nbsp;<a href=\"https://dev.to/grab\" target=\"_blank\" style=\"color: var(--link-branded-color);\">@grab</a>&nbsp;annotations can be placed anywhere in the JSR223. In this example,&nbsp;<a href=\"https://dev.to/grab\" target=\"_blank\" style=\"color: var(--link-branded-color);\">@grab</a>&nbsp;annotation will manage the&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">joda-time</code>&nbsp;dependency and prints the current date and time in the&nbsp;<strong>Log Viewer</strong>. By default, it will download the dependencies from mvnrepository.com.</p><p>Click on the&nbsp;<strong>Run</strong>&nbsp;button in JMeter to see the log message in the Log Viewer. Once you click on&nbsp;<strong>Run</strong>&nbsp;button, the above script will download the dependencies from the source and keep the JARs in&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">/Users/&lt;user&gt;/.groovy/grapes</code>&nbsp;in Mac,&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">C:\\Users\\&lt;user&gt;\\.groovy\\grapes</code>&nbsp;in Windows OS.</p><p>The dependencies download will happen only for the first execution. Eventual execution in JMeter will be fast.</p><h3>AWS S3 SDK</h3><p>There are multiple methods available to upload the artifacts to S3, e.g. via AWS CLI, AWS SDK, HTTP requests and more. The official AWS SDK opens the door to building applications for AWS via its API.</p><p>By leveraging the AWS SDK for Java, it is easy to interact with the AWS services. The latest version of the AWS SDK for Java is v2. v2 is a major rewrite of v1. The v2 version is packed with a nonblocking I/O architecture using Netty where it achieves high concurrency with fewer threads. Also, it supports HTTP/2 and automatic pagination.</p><h3>Upload files to S3 in Groovy</h3><p>We are going to leverage Grape in Groovy in the JSR223 Sampler by adding AWS SDK for S3. Head to https://mvnrepository.com/artifact/software.amazon.awssdk/s3 and select the latest version. At this time of writing, the latest version is 2.17.172.</p><p>Click&nbsp;<strong>Grape&nbsp;</strong>and copy the annotation as shown below.</p><p><a href=\"https://qainsights.com/wp-content/uploads/2022/04/image-12.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wveaVHYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2022/04/image-12.png\" alt=\"Upload files to AWS S3 in JMeter using Groovy - Grape\" height=\"162\" width=\"671\"></a></p><p><em>Upload files to AWS S3 in JMeter using Groovy - Grape</em></p><p>Then, copy and paste the below snippet into the JSR223 Sampler.</p><pre class=\"ql-syntax\" spellcheck=\"false\">@Grapes(\r\n    @Grab(group=\'software.amazon.awssdk\', module=\'s3\', version=\'2.17.172\', scope=\'test\')\r\n)\r\nimport software.amazon.awssdk.auth.credentials.AwsBasicCredentials\r\nimport software.amazon.awssdk.auth.credentials.StaticCredentialsProvider\r\nimport software.amazon.awssdk.regions.Region\r\nimport software.amazon.awssdk.services.s3.S3Client\r\nimport software.amazon.awssdk.services.s3.model.*\r\n\r\nimport java.io.File\r\nimport java.nio.file.Paths\r\n\r\n// Configurations\r\nString accessKey = vars.get(\"AWS_ACCESS_KEY\")\r\nString secretKey = vars.get(\"AWS_SECRET_KEY\")\r\nString bucketName = vars.get(\"AWS_BUCKET_NAME\")\r\nString strFilename = \"C:\\\\temp\\\\result.json\"\r\n\r\ntry {\r\n    // Set region\r\n    Region region = Region.US_EAST_1\r\n    \r\n    // Create credentials\r\n    AwsBasicCredentials awsCreds = AwsBasicCredentials.create(\r\n          accessKey,\r\n          secretKey)\r\n    \r\n    // Build S3 Client\r\n    S3Client s3 = S3Client.builder()\r\n          .region(region)\r\n          .credentialsProvider(StaticCredentialsProvider.create(awsCreds))\r\n          .build()\r\n    \r\n    // Create file object\r\n    File s3Obj = new File(strFilename)\r\n    \r\n    // Create PUT request\r\n    PutObjectRequest request = PutObjectRequest.builder()\r\n          .bucket(bucketName)\r\n          .key(s3Obj.getName())\r\n          .build()\r\n    \r\n    // Upload file\r\n    s3.putObject(request, Paths.get(strFilename))\r\n}\r\n\r\n// Catching exception and displaying it in the Sample result\r\ncatch (S3Exception e){\r\n    SampleResult.setSuccessful(false)\r\n    SampleResult.setResponseMessage(e.getMessage())\r\n    SampleResult.setResponseCode(null)\r\n}\r\n</pre><p>Let us slice the above code.</p><ol><li>After adding the&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">import</code>&nbsp;statements, the first block represents the configurations such as AWS Access, Secret Key, and Bucket name.</li><li>The next configuration is the AWS region.</li><li><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">AwsBasicCredentials</code>&nbsp;block creates the credentials to access the bucket</li><li><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">S3Client</code>&nbsp;block creates a S3 client using the&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">AwsBasicCredentials</code>&nbsp;credentials.</li><li><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">s3Obj</code>&nbsp;is the file to be uploaded.</li><li><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">PutObjectRequest</code>&nbsp;will build the request.</li><li><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">s3.putObject</code>&nbsp;will upload the file by leveraging the&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">request.</code></li></ol><p>If any exceptions occurs, JMeter will display the exceptions in the sampler with the exception details for troubleshooting.</p><p>The variables&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">AWS_ACCESS_KEY</code>,&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">AWS_BUCKET_NAME</code>, and&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">AWS_SECRET_KEY</code>&nbsp;is available in the&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">Test Plan</code>.</p><p>Here is the&nbsp;<a href=\"https://github.com/QAInsights/S3-Upload-JMeter-Groovy\" target=\"_blank\" style=\"color: var(--link-branded-color);\">repository to download</a>&nbsp;the sample JMeter test plan for your reference.</p><p>Never ever store the AWS credentials in the test plan. Pass the credentials via command line, environment variables, or programmatically generate them.</p><p>Congratulations! Now you know how to upload artifacts to S3 programmatically in JMeter using JSR223 Sampler.</p><h2>Conclusion</h2><p>Uploading artifacts to S3 is just the beginning. By leveraging the AWS SDK for Java, it is possible to interact with AWS services from JMeter using Groovy. E.g, after JMeter test execution, you can upload the results in a zip file using the above snippet. If you have any other usecases for JMeter, please let me know in the comments.</p>',1,'2022-06-26 12:34:24','2022-04-26 12:34:24',NULL),(13,1,'Debugging jsoup Java Code in Production Using Lightrun','Debugging_jsoup_Java_Code_in_Production_Using_Lightrun','','/images/posts/1/ke7ewgpqy7oj59w4t558_3262022T193610.webp','<p>Scraping websites built for modern browsers is far more challenging than it was a decade ago. jsoup is a convenient API that makes scraping websites trivial via DOM traversal, CSS Selectors, JQuery-Like methods and more. But it isn’t without its caveat. Every scraping API is a ticking time bomb.</p><p>Real-world HTML is flaky. It changes without notice since it isn’t a documented API. When our Java program fails in scraping, we’re suddenly stuck with a ticking time bomb. In some cases, this is a simple issue that we can reproduce locally and deploy. But some nuanced changes in the DOM tree might be harder to observe in a local test case. In those cases, we need to understand the problem in the parse tree before pushing an update. Otherwise, we might have a broken product in production.</p><h2>What is jsoup? The Java HTML Parser</h2><p>Before we go into the nuts and bolts of debugging jsoup let’s first answer, the question above and discuss the core concepts behind jsoup.</p><p>The&nbsp;<a href=\"https://jsoup.org/\" target=\"_blank\" style=\"color: var(--link-branded-color);\">jsoup website</a>&nbsp;defines it as:</p><p>jsoup is a Java library for working with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data, using the best of HTML5 DOM methods and CSS selectors.</p><p>jsoup implements the&nbsp;<a href=\"https://whatwg.org/html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">WHATWG HTML5</a>&nbsp;specification and parses HTML to the same DOM as modern browsers do.</p><p>With that in mind, let’s go directly to a simple sample also from the same website:</p><pre class=\"ql-syntax\" spellcheck=\"false\">Document doc = Jsoup.connect(\"https://en.wikipedia.org/\").get();\r\nlog(doc.title());\r\nElements newsHeadlines = doc.select(\"#mp-itn b a\");\r\nfor (Element headline : newsHeadlines) {\r\n  log(\"%s\\n\\t%s\",\r\n    headline.attr(\"title\"), headline.absUrl(\"href\"));\r\n}\r\n</pre><p><br></p><p>This code snippet fetches headlines from wikipedia. In the code above, you can see several interesting features:</p><ul><li>Connection to URL is practically seamless – just pass a string URL to the connect method</li><li>There are special cases for some element children. E.g. Title is exposed as a simple method that returns a string without selecting from the DOM tree</li><li>However, we can select the entry using pretty elaborate selector syntax</li></ul><p>If you’re looking at that and thinking “that looks fragile”. Yes, it is.</p><h2>Simple jsoup Test</h2><p>To demonstrate debugging, I created a simple demo that you can download here.</p><p>You can use the following Maven dependency to install jsoup into any Java program. Maven will download jsoup jar seamlessly:</p><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;dependency&gt;\r\n  &lt;groupId&gt;org.jsoup&lt;/groupId&gt;\r\n  &lt;artifactId&gt;jsoup&lt;/artifactId&gt;\r\n  &lt;version&gt;1.14.3&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n</pre><p><br></p><p>This demo is a trivial Java app that returns a complete list of external links and elements with src attributes in a page. This is based on the code from here, converted to a Spring Boot Java program. The jsoup applicable code is relatively short:</p><pre class=\"ql-syntax\" spellcheck=\"false\">public Set&lt;String&gt; listLinks(String url, boolean includeMedia) throws IOException {\r\n   Document doc = Jsoup.connect(url).get();\r\n   Elements links = doc.select(\"a[href]\");\r\n   Elements imports = doc.select(\"link[href]\");\r\n\r\n   Set&lt;String&gt; result = new TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER);\r\n   if(includeMedia) {\r\n       Elements media = doc.select(\"[src]\");\r\n       for (Element src : media) {\r\n           result.add(src.absUrl(\"src\"));\r\n           //result.add(src.attr(\"abs:src\"));\r\n       }\r\n   }\r\n\r\n   for (Element link : imports) {\r\n       result.add(link.absUrl(\"abs:href\"));\r\n   }\r\n\r\n   for (Element link : links) {\r\n       result.add(link.absUrl(\"abs:href\"));\r\n   }\r\n\r\n   return result;\r\n}\r\n</pre><p><br></p><p>As you can see, we fetch the input String URL. We can also use input streams, but this makes things slightly more complicated when parsing relative URLs (we need a base URL anyway). We then search for links and objects that have an src attribute. The code then adds all of them into a set to keep the entries sorted and unique.</p><p>We expose this as a web service using the following code:</p><pre class=\"ql-syntax\" spellcheck=\"false\">@RestController\r\npublic class ParseLinksWS {\r\n   private final ParseLinks parseLinks;\r\n\r\n   public ParseLinksWS(ParseLinks parseLinks) {\r\n       this.parseLinks = parseLinks;\r\n   }\r\n\r\n   @GetMapping(\"/parseLinks\")\r\n   public Set&lt;String&gt; listLinks(@RequestParam String url, @RequestParam(required = false) Boolean includeMedia) throws IOException {\r\n       return parseLinks.listLinks(url, includeMedia == null ? true : includeMedia);\r\n   }\r\n}\r\n</pre><p><br></p><p>Once we run the application can the application, we can use it with a simple curl command:</p><pre class=\"ql-syntax\" spellcheck=\"false\">curl -H \"Content-Type: application/json\" \"http://localhost:8080/parseLinks?url=https%3A%2F%2Flightrun.com\"\r\n</pre><p><br></p><p>This prints out the list of URLs referred to in the Lightrun home page.</p><h2>Debugging Content Failures</h2><p>Typical string scraping issues occur when an element object changes. E.g. wikipedia can change the structure of their pages and the select method above can suddenly fail. This is often a nuanced failure, e.g. missing DOM element in the Java object hierarchy which can trigger a failure of the select method.</p><p>Unfortunately, this can be a subtle failure. Especially when dealing with nested node elements and inter-document dependencies. Most developers solve this by logging a huge amount of data. This can be a problem due to two big reasons:</p><ul><li>Huge logs – they are both hard to read and very expensive to ingest</li><li>Privacy/GDPR Violations – a scraped site might include user specific private information. Worse!</li><li>The scraped site might change to include private information after scraping was initially implemented. Logging this private information might violate various laws.</li></ul><p>If we don’t log enough and can’t reproduce the issue locally, things can become difficult. We’re stuck in the add logs, build, test, deploy, reproduce – rinse repeat loop.</p><p>Lightrun offers a better way. Just track the specific failure directly in production, verify the problem, and create a fix that will work with one deployment.</p><p><strong>NOTE:</strong>&nbsp;This tutorial assumes you installed Lightrun and understand the basic concepts behind it. If not, please&nbsp;<a href=\"https://docs.lightrun.com/\" target=\"_blank\" style=\"color: var(--link-branded-color);\">check out the docs</a>.</p><h3>Finding your way in Browser DOM</h3><p>Assuming you don’t know where to look, a good place to start is inside the jsoup API. This can lead you back to user code. The cool thing is that this works regardless of your code. We can find the right line/file for the snapshot by digging into the API call.</p><p>I ctrl-clicked (on Mac use Meta-click) the select method call here:</p><pre class=\"ql-syntax\" spellcheck=\"false\">Elements links = doc.select(\"a[href]\");\r\n</pre><p><br></p><p>And it led me to the Element class. In it I ctrl-clicked the Selector “select” method and got to the “interesting” place.</p><p>Here, I could place a conditional snapshot to see every case where an “a[href]” query is made:</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--m5VntTzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1650367462176/h8Wqwl1Yk.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--m5VntTzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1650367462176/h8Wqwl1Yk.png\" alt=\"image1.png\" height=\"550\" width=\"880\"></a></p><p>This can show me the methods/lines that perform that query:</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TwEpXoLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1650465643162/RMkm_mRVG.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TwEpXoLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1650465643162/RMkm_mRVG.png\" alt=\"image4.png\" height=\"508\" width=\"880\"></a></p><p>This can help a lot in narrowing down the general problematic area in the document object hierarchy.</p><p>Sometimes, a snapshot might not be enough. We might need to use a log. The advantage of logging is that we can produce a lot of information, but only for a specific case and on-demand.</p><p>The value of logs is that they can follow an issue in a way that’s very similar to stepping over code. The point where we placed the snapshot is problematic for logs. We know the query sent but we don’t have the value that’s returned yet. We can solve this easily with logs. First, we add a log with the following text:</p><pre class=\"ql-syntax\" spellcheck=\"false\">\"Executing query {query}\"\r\n</pre><p><br></p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yscfGkuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1650465598568/jjkSGCvVa.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yscfGkuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1650465598568/jjkSGCvVa.png\" alt=\"image2.png\" height=\"651\" width=\"797\"></a></p><p>Then, to find out how many entries we returned, we just go to the caller (which we know thanks to the stack in the snapshot) and add the following log there:</p><pre class=\"ql-syntax\" spellcheck=\"false\">Links query returned {links.size()}\r\n</pre><p><br></p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--YQQQE-Wy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1650465693574/unexIjfhz.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--YQQQE-Wy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1650465693574/unexIjfhz.png\" alt=\"image5.png\" height=\"552\" width=\"803\"></a></p><p>This produces the following log which lets us see that we had 147&nbsp;<code style=\"background-color: rgba(0, 0, 0, 0.1); color: var(--color-body-color);\">a[href]</code>&nbsp;links. The beauty of this is that the additional logs are interlaced with the pre-existing logs in-context:</p><pre class=\"ql-syntax\" spellcheck=\"false\">Feb 02, 2022 11:25:27 AM org.jsoup.select.Selector select\r\nINFO: LOGPOINT: Executing query a[href]\r\nFeb 02, 2022 11:25:27 AM com.lightrun.demo.jsoupdemo.service.ParseLinks listLinks\r\nINFO: LOGPOINT: Links query returned 147\r\nFeb 02, 2022 11:25:27 AM org.jsoup.select.Selector select\r\nINFO: LOGPOINT: Executing query link[href]\r\nFeb 02, 2022 11:25:27 AM org.jsoup.select.Selector select\r\nINFO: LOGPOINT: Executing query [src]\r\n</pre><p><br></p><h2>Avoid Security and GDPR Issues</h2><p>GDPR and security issues can be a problem with leaking user information into the logs. This can be a major problem, and Lightrun helps you reduce that risk significantly.</p><p>Lightrun offers two potential solutions that can be used in tandem when applicable.</p><h3>Log Piping</h3><p>The big problem with GDPR is the log ingestion. If you log private user data and then send it to the cloud, it’s there for a long time. It’s hard to find after the fact and it’s very hard to fix.</p><p>Lightrun provides the ability to pipe all of Lightrun’s injected logging to the IDE directly. This has an advantage of removing noise from other developers who might work with the logs. It can also skip the ingestion (optionally).</p><p>To send logs only to the plugin, select the piping mode as “plugin”.</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WQhAJ_vG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1650465790348/J8eYWzZC4.png\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WQhAJ_vG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1650465790348/J8eYWzZC4.png\" alt=\"image3.png\" height=\"382\" width=\"880\"></a></p><h3>PII Reduction/Blocklists</h3><p>Personally Identifiable Information (PII) is at the core of GDPR and is also a major security risk. A malicious developer in your organization might want to use Lightrun to siphon user information. Blocklists prevent developers from placing actions in specific files.</p><p>PII reduction lets us hide information matching specific patterns from the logs (e.g. credit card format etc). This can be defined in the Lightrun web interface by a manager role.</p><h2>TL;DR</h2><p>With Java content scraping, jsoup is the obvious leader. Development with jsoup is far more than string operations or even handling the connection aspects. Besides getting the document object, it also handles complex aspects required for DOM element and scripting.</p><p>Scraping is a risky business. It might break in the blink of an eye when a website changes slightly.</p><p>Worse, it can break to some users in odd ways that are impossible to reproduce locally.</p><p>Thanks to Lightrun, we can debug such failures directly in the production environment and publish a working version swiftly. You can use Lightrun for free by signing up&nbsp;<a href=\"https://lightrun.com/free\" target=\"_blank\" style=\"color: var(--link-branded-color);\">here</a>.</p>',2,'2022-04-26 12:36:10','2022-05-06 09:26:56','2022-05-06 09:26:56'),(14,4,'20+ Core Java Interview Questions for experienced Professionals from Investment Banks','20+_Core_Java_Interview_Questions_for_experienced_Professionals_from_Investment_Banks','','/images/posts/4/Eibsee_Germany_462022T151745.jpg','<p><br></p><p><em>Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.</em></p><p>There are a lot of&nbsp;<a href=\"https://javarevisited.blogspot.com/2018/05/10-tips-to-become-better-java-developer.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Java developers</a>&nbsp;trying for Java development role on Investment banks like Barclays, Credit Suisse, Citibank, etc, but many of them don\'t have any idea of what kind of interview questions they can expect there.</p><p>In this article, I\'ll share some of the most frequently asked&nbsp;<a href=\"https://javarevisited.blogspot.com/2015/10/133-java-interview-questions-answers-from-last-5-years.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">core Java questions</a>&nbsp;from investment banks to Java programmers with more than 3 years of experience.</p><p>Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.</p><p>Yes, these questions are not for&nbsp;<a href=\"http://www.java67.com/2018/03/20-Java-Interview-Questions-Answers-freshers-1-2-3-YearsExperienced-Programmers.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">beginners</a>&nbsp;or&nbsp;<a href=\"https://javarevisited.blogspot.com/2018/07/top-30-java-phone-interview-questions.html#axzz5N70xIF15\" target=\"_blank\" style=\"color: var(--link-branded-color);\">1 to 2 years of Java</a>&nbsp;experienced professional as often banks don\'t hire them via open interviews, they mostly join as graduate trainees, but they can also learn a lot by just going through questions and understanding answers and concepts behind them.</p><p><strong>It\'s not guaranteed that you will get these questions</strong>, in fact, most likely you won\'t, but this will give you some idea of what kind of questions you can expect. The more you prepare the better your interview will be.</p><p>If you think these 21 core java questions are not enough and you need more than check out these additional&nbsp;<a href=\"http://www.java67.com/2015/03/top-40-core-java-interview-questions-answers-telephonic-round.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>40 Java questions</strong></a>&nbsp;for the telephonic interview and these&nbsp;<a href=\"http://bit.ly/2CupaSL\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>200+ Java questions</strong></a>from last 5 years as well.</p><p>Once you have done those, you would be more confident to given any Java interview, be it a phone interview or face-to-face.</p><h2>Frequently asked Core Java Interview Questions from Investment Banks</h2><p>Anyway, without wasting any more of your time, let\'s dive into some of the common Java interview questions from banks, which I have collected from some of my friends and colleagues who appeared in interviews of these banks.</p><p><strong>Question 1. Does not overriding hashCode() method has any performance implication?</strong>&nbsp;(<a href=\"http://java67.blogspot.com/2013/04/example-of-overriding-equals-hashcode-compareTo-java-method.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>This is a good question and opens to all, as per my knowledge, a poor hash code function will result in the&nbsp;<a href=\"http://javarevisited.blogspot.sg/2016/01/how-does-java-hashmap-or-linkedhahsmap-handles.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">frequent collision in HashMap</a>&nbsp;which eventually increases the time for adding an object into Hash Map.</p><p>From&nbsp;<a href=\"https://javarevisited.blogspot.com/2018/08/top-5-java-8-courses-to-learn-online.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Java 8</a>&nbsp;onwards through collision will not impact performance as much as it does in earlier versions because after a threshold the&nbsp;<a href=\"http://javarevisited.blogspot.sg/2017/07/top-10-linked-list-coding-questions-and.html#axzz4xXS86IVo\" target=\"_blank\" style=\"color: var(--link-branded-color);\">linked list</a>&nbsp;will be replaced by a&nbsp;<a href=\"http://www.java67.com/2016/08/binary-tree-inorder-traversal-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">binary tree</a>, which will give you&nbsp;<strong>O(logN)</strong>&nbsp;performance in the worst case as compared to O(n) of a linked list.</p><p><strong>Question 2: How does substring () inside String works?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.sg/2011/10/how-substring-in-java-works.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)</p><p>Another good Java interview question, I think the answer is not sufficient, but here it is \"<em>Substring creates a new object out of source string by taking a portion of original string\"</em>.</p><p>This question was mainly asked to see if the developer is familiar with the risk of&nbsp;<a href=\"https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fjava-understanding-solving-memory-problems\" target=\"_blank\" style=\"color: var(--link-branded-color);\">memory leak</a>, which sub-string can create.</p><p>Until Java 1.7, the substring holds the reference of the original character array, which means even a sub-string of 5 characters long,&nbsp;<em>can prevent 1GB character array from garbage collection</em>, by holding a strong reference.</p><p>This issue was fixed in Java 1.7, where the original character array is not referenced anymore, but that change also made the creation of a substring a bit costly in terms of time. Earlier it was on the range of O(1), which could be O(n) in the worst case of Java 7 onwards.</p><p>Btw, if you want to learn more about memory management in Java, I recommend checking out&nbsp;<a href=\"https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Funderstanding-java-vm-memory-management\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Understanding the Java Virtual Machine: Memory Management</a>&nbsp;course By Kevin Jones on Pluralsight.</p><p><a href=\"https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Funderstanding-java-vm-memory-management\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VXt6zHyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://3.bp.blogspot.com/-N209tnOe6R0/Vod9K_ZfNeI/AAAAAAAAEdw/iRdD6OcOaHQ/s400/JVM%252Barchitecture.jpg\"></a></p><p><strong>Question 3: Does all property of Immutable Object needs to be final in Java?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.com/2013/03/how-to-create-immutable-class-object-java-example-tutorial.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)</p><p>Not necessary, as stated in the linked answer article, you can achieve the same functionality by&nbsp;<em>making a member as non-final but private and not modifying them except in constructor.</em></p><p>Don\'t provide a setter method for them and if it is a mutable object, then don\'t ever leak any reference for that member.</p><p>Remember&nbsp;<a href=\"https://javarevisited.blogspot.com/2016/09/21-java-final-modifier-keyword-interview-questions-answers.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">making a reference variable final</a>, only ensures that it will not be reassigned a different value, but you can still change individual properties of an object, pointed by that reference variable.</p><p>This is one of the key points, Interviewer likes to hear from candidates. If you want to know more about final variables in Java, I recommend joining&nbsp;<a href=\"https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;subid=0&amp;offerid=323058.1&amp;type=10&amp;tmpid=14538&amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fjava-the-complete-java-developer-course%2F\" target=\"_blank\" style=\"color: var(--link-branded-color);\">The Complete Java MasterClass</a>&nbsp;on Udemy, one of the best, hands-on course.</p><p><strong>Question 4: Can you use HashMap in the multi-threaded environment? What can be the problem? When does get() method go to the infinite loop?</strong>&nbsp;(<a href=\"http://java67.blogspot.com/2013/06/how-get-method-of-hashmap-or-hashtable-works-internally.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>Answer: Well, nothing is wrong, it depends upon how you use it. For example, if you&nbsp;<a href=\"http://www.java67.com/2016/01/how-to-initialize-hashmap-with-values-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">initialize a HashMap</a>&nbsp;by just one thread and then all threads are only reading from it, then it\'s perfectly fine.</p><p>One example of this is a&nbsp;<strong>Map which contains configuration properties</strong>.</p><p>The real problem starts when at least one of that thread is updating HashMap i.e. adding, changing, or removing any key-value pair.</p><p>Since put() operation can cause re-sizing and which can further lead to an infinite loop, that\'s why either you should use&nbsp;<a href=\"http://javarevisited.blogspot.com/2012/01/java-hashtable-example-tutorial-code.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Hashtable</a>&nbsp;or&nbsp;<a href=\"http://javarevisited.blogspot.com/2013/02/concurrenthashmap-in-java-example-tutorial-working.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">ConcurrentHashMap</a>, later is even better.</p><p><strong>Question 5: Can you write a critical section code for the singleton?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.sg/2014/05/double-checked-locking-on-singleton-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>This core Java question is another common question and expecting the candidate to write Java singleton using&nbsp;<a href=\"http://www.java67.com/2015/09/thread-safe-singleton-in-java-using-double-checked-locking-pattern.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">double-checked locking</a>.</p><p>Remember to use a&nbsp;<a href=\"http://javarevisited.blogspot.sg/2011/06/volatile-keyword-java-example-tutorial.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">volatile variable</a>&nbsp;to make Singleton&nbsp;<a href=\"http://www.java67.com/2016/04/why-double-checked-locking-was-broken-before-java5.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">thread-safe</a>.</p><p>Here is the code for a critical section of a thread-safe Singleton pattern using&nbsp;<a href=\"https://javarevisited.blogspot.com/2014/05/double-checked-locking-on-singleton-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">double-checked locking idiom</a>:</p><pre class=\"ql-syntax\" spellcheck=\"false\">public class Singleton {\r\n\r\nprivate static volatile Singleton _instance;\r\n\r\n/** * Double checked locking code on Singleton\\\r\n    * @return Singelton instance\\\r\n*/\r\n\r\npublic static Singleton getInstance() {\r\n\r\nif (_instance == null) {\r\n\r\nsynchronized (Singleton.class) {\r\n\r\nif (_instance == null) {\r\n\r\n_instance = new Singleton();\r\n\r\n}\r\n\r\n}\r\n\r\n}\r\n\r\nreturn _instance; }\r\n\r\n}\r\n</pre><p><br></p><p>On the same note, it\'s good to know about classical design patterns likes Singleton, Factory, Decorator, etc. If you are interested in this then this&nbsp;<a href=\"https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdesign-patterns-java%2F\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>Design Pattern in Java</strong></a>&nbsp;is a good collection of that.</p><p><a href=\"https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fpatterns-library\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_kZsM8A3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/1%2AMTeZ0WlAo-_9AAQrGS-CCw.jpeg\"></a></p><p><strong>Question 6: How do you handle error condition while writing a stored procedure or accessing stored procedure from java?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.com/2013/04/spring-framework-tutorial-call-stored-procedures-from-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)</p><p>This is one of the&nbsp;<em>tough Java interview questions</em>&nbsp;and again it\'s open for you all, my friend didn\'t know the answer so he didn\'t mind telling me.</p><p>My take is that a stored procedure should return an error code if some operation fails but if the stored procedure itself fails then catching&nbsp;<a href=\"http://www.java67.com/2016/06/javasqlsqlexception-no-suitable-driver-found-jdbc-mysql-localhost-3306.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">SQLException</a>&nbsp;is the only choice.</p><p>The&nbsp;<a href=\"https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997/?tag=javamysqlanta-20\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>Effective Java 3rd Edition</strong></a>&nbsp;also has some good advice on dealing with error and exceptions in Java, which is worth reading.</p><p><a href=\"https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997/?tag=javamysqlanta-20\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9xhAQWWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/1%2Ap_TBjBE24E87PMZuv_koUA.png\"></a></p><p><strong>Question 7 : What is difference between Executor.submit() and Executer.execute() method ?</strong>&nbsp;(<a href=\"http://java67.blogspot.com/2012/08/5-thread-interview-questions-answers-in.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)</p><p>This Java interview question is from my list of&nbsp;<a href=\"http://javarevisited.blogspot.sg/2014/07/top-50-java-multithreading-interview-questions-answers.html#axzz4jaJmaqbE\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Top 50 Java multi-threading question answers</a>, It\'s getting popular day by day because of the huge demand for a Java developer with good concurrency skill.</p><p>The answer to this Java interview question is that former returns an object of&nbsp;<a href=\"http://javarevisited.blogspot.sg/2015/06/how-to-use-callable-and-future-in-java.html#axzz4tUeeQOAU\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Future</a>&nbsp;which can be used to find the result from a worker thread)</p><p>There is a difference when looking at exception handling. If your tasks throw an exception and if it was submitted with executing this exception will go to the uncaught exception handler (when you don\'t have provided one explicitly, the default one will just print the stack trace to System.err).</p><p>If you submitted the task with&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">submit()</code>&nbsp;method any thrown exception,&nbsp;<a href=\"http://javarevisited.blogspot.sg/2011/12/checked-vs-unchecked-exception-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">checked exception</a>&nbsp;or not, is the part of the task\'s return status.</p><p>For a task that was submitted with submitting and that terminates with an exception, the Future.get() will re-throw this exception, wrapped in an ExecutionException.</p><p>If you want to learn more about Future, Callable, and Asynchronous computing and take your Java Concurrency skills to next level, I suggest you check out&nbsp;<a href=\"https://learning.javaspecialists.eu/courses/concurrency-in-practice-bundle?affcode=92815_johrd7r8\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>Java Concurrency Practice in Bundle</strong></a>&nbsp;course by Java Champion Heinz Kabutz.</p><p><a href=\"https://learning.javaspecialists.eu/courses/concurrency-in-practice-bundle?affcode=92815_johrd7r8\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZqgDsyfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/1%2A9d4d_Pne_2jSwdCi9aG9NQ.png\"></a></p><p>It\'s an advanced course, which is based upon the classic&nbsp;<a href=\"http://www.amazon.com/dp/0321349601/?tag=javamysqlanta-20\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>Java Concurrency Practice</strong></a>&nbsp;book by none other than&nbsp;<a href=\"https://medium.com/@briangoetz\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Brian Goetz</a>, which is considered as a bible for Java Developers. The course is definitely worth your time and money. Since Concurrency is a tough and tricky topic, a combination of this book and course is the best way to learn it.</p><p><strong>Question 8: What is the difference between factory and abstract factory pattern?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.sg/2013/01/difference-between-factory-and-abstract-factory-design-pattern-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>Answer: Abstract Factory provides one more level of abstraction. Consider different factories each extended from an Abstract Factory and responsible for the creation of different hierarchies of objects based on the type of factory. E.g. AbstractFactory extended by AutomobileFactory, UserFactory, RoleFactory, etc. Each individual factory would be responsible for the creation of objects in that genre.</p><p>If you want to learn more about Abstract Factory design patterns then I suggest you check out&nbsp;<a href=\"https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;subid=0&amp;offerid=323058.1&amp;type=10&amp;tmpid=14538&amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdesign-patterns-java%2F\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Design Pattern in Java</a>&nbsp;course, which provides a nice, real-world example to understand patterns better.</p><p>Here is UML diagram of factory and abstract factory pattern:</p><p><a href=\"https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;subid=0&amp;offerid=323058.1&amp;type=10&amp;tmpid=14538&amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdesign-patterns-java%2F\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--x2EDZilN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/1%2AzoSC-TjwFjirb_ShdCnfYQ.jpeg\"></a></p><p>If you need more choices, then you can also check out my list of&nbsp;<a href=\"https://javarevisited.blogspot.com/2018/02/top-5-java-design-pattern-courses-for-developers.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Top 5 Java Design Pattern</a>&nbsp;courses.</p><p><strong>Question 9: What is Singleton? is it better to make the whole method synchronized or only the critical section synchronized?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>Singleton in Java is a class with just one instance in the whole Java application, for example,&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">java.lang.Runtime</code>&nbsp;is a Singleton class.</p><p>Creating Singleton was tricky prior to Java 4 but once Java 5 introduced&nbsp;<a href=\"https://javarevisited.blogspot.com/2011/08/enum-in-java-example-tutorial.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Enum</a>&nbsp;it\'s very easy.</p><p>You can see my article&nbsp;<a href=\"http://javarevisited.blogspot.sg/2012/12/how-to-create-thread-safe-singleton-in-java-example.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">How to create thread-safe Singleton in Java</a>&nbsp;for more details on writing Singleton using the enum and double checked locking which is the purpose of this Java interview question.</p><p><strong>Question 10: Can you write code for iterating over HashMap in Java 4 and Java 5?</strong>&nbsp;(<a href=\"http://java67.blogspot.com/2014/05/3-examples-to-loop-map-in-java-foreach.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>Tricky one, but he managed to write using while and a for a loop. Actually, there are four ways to iterate over any Map in Java, one involves using&nbsp;<a href=\"http://www.java67.com/2016/05/keyset-vs-entryset-vs-values-in-java-map-example.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">keySet()</a>&nbsp;and iterating over a key and then using&nbsp;<a href=\"http://www.java67.com/2013/06/how-get-method-of-hashmap-or-hashtable-works-internally.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">get()</a>&nbsp;method to retrieve values, which is a bit expensive.</p><p>The second method involves using&nbsp;<a href=\"http://www.java67.com/2013/08/best-way-to-iterate-over-each-entry-in.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">entrySet()</a>&nbsp;and iterating over them either by using&nbsp;<a href=\"https://javarevisited.blogspot.com/2015/09/java-8-foreach-loop-example.html#axzz5HKqzQNyN\" target=\"_blank\" style=\"color: var(--link-branded-color);\">for each loop</a>&nbsp;or while with Iterator.hasNext() method.</p><p>This one is a better approach because both key and value object is available to you during Iteration and you don\'t need to call&nbsp;<a href=\"http://javarevisited.blogspot.sg/2011/02/how-hashmap-works-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">get()</a>&nbsp;method for retrieving the value, which could give the O(n) performance in case of a huge&nbsp;<a href=\"http://www.java67.com/2017/06/5-difference-between-array-and-linked.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">linked list</a>&nbsp;at one bucket.</p><p>You can further, see my post&nbsp;<a href=\"http://javarevisited.blogspot.com/2011/12/how-to-traverse-or-loop-hashmap-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">4 ways to iterate over Map in Java</a>&nbsp;for detailed explanation and code examples.</p><p><strong>Question 11 : When do you override hashCode() and equals()?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.com/2013/08/10-equals-and-hashcode-interview.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>Whenever necessary especially if you want to do an equality check based upon business logic rather than object equality e.g. two employee objects are equal if they have the same&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">emp_id</code>, despite the fact that they are two different objects, created by different parts of the code.</p><p>Also,&nbsp;<a href=\"http://www.java67.com/2013/04/example-of-overriding-equals-hashcode-compareTo-java-method.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">overriding</a>&nbsp;both these methods are must if you want to use them as key in&nbsp;<a href=\"http://www.java67.com/2017/08/top-10-java-hashmap-interview-questions.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">HashMap</a>.</p><p>Now as part of the equals-hashcode contract in Java, when you override equals, you must override hashcode as well, otherwise, your object will not break invariant of classes e.g. Set, Map which relies on&nbsp;<a href=\"http://javarevisited.blogspot.sg/2013/08/10-equals-and-hashcode-interview.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">equals()</a>&nbsp;method for functioning properly.</p><p>You can also check my post&nbsp;<a href=\"http://javarevisited.blogspot.com/2011/02/how-to-write-equals-method-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">5 tips on equals in Java</a>&nbsp;to understand the subtle issue which can arise while dealing with these two methods.</p><p><strong>Question 12: What will be the problem if you don\'t override hashCode() method?</strong>&nbsp;(<a href=\"http://java67.blogspot.sg/2013/04/example-of-overriding-equals-hashcode-compareTo-java-method.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>If you don\'t override the equals method, then the contract between equals and hashcode will not work, according to which, two objects which are equal by equals() must have the&nbsp;<strong>same hashcode</strong>.</p><p>In this case, another object may return different hashCode and will be stored on that location, which breaks invariant of&nbsp;<a href=\"http://www.java67.com/2013/02/10-examples-of-hashmap-in-java-programming-tutorial.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">HashMap class</a>&nbsp;because they are not supposed to allow duplicate keys.</p><p>When you add the object using the put() method, it iterates through all Map.Entry objects present in that bucket location, and update value of the previous mapping, if Map already contains that key. This will not work if the hashcode is not overridden.</p><p>If you want to learn more about the role of equals() and hashCode() in Java Collections like Map and Set, I suggest you go through&nbsp;<a href=\"https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fjava-fundamentals-collections\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Java Fundamentals: Collections</a>&nbsp;course on Pluralsight by Richard Warburton</p><p><a href=\"https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fjava-fundamentals-collections\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--G3Flo7x4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/1%2AHVbOHlpmI5PGNgWUpgpI5A.jpeg\"></a></p><p><strong>Question 13 : Is it better to synchronize critical section of getInstance() method or whole getInstance() method?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.com/2014/05/double-checked-locking-on-singleton-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>The answer is only a critical section because if we lock the whole method that every time someone calls this method, it will have to wait even though we are not creating an object.</p><p>In other words,&nbsp;<a href=\"http://javarevisited.blogspot.sg/2011/04/synchronization-in-java-synchronized.html#axzz4sZOoYUxv\" target=\"_blank\" style=\"color: var(--link-branded-color);\">synchronization</a>&nbsp;is only needed, when you create an object, which happens only once.</p><p>Once an object has created, there is no need for any synchronization. In fact, that\'s very poor coding in terms of performance, as the synchronized method reduces performance up to 10 to 20 times.</p><p>Here is UML diagram of&nbsp;<a href=\"https://javarevisited.blogspot.com/2011/03/10-interview-questions-on-singleton.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Singleton design pattern</a>:</p><p><a href=\"http://bit.ly/2xZnIDC\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mxDlhvGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/1%2AySVB-r0Nj4m9P9i8Lz_dgw.png\"></a></p><p>By the way, there are several ways to create a thread-safe singleton in Java, including&nbsp;<a href=\"http://javarevisited.blogspot.sg/2012/07/why-enum-singleton-are-better-in-java.html#axzz4tzMEHSJw\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Enum</a>, which you can also mention as part of this question or any follow-up.</p><p>If you want to learn more, you can also check to&nbsp;<a href=\"http://bit.ly/2xZnIDC\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>Learn Creational Design Patterns in Java</strong> </a>--- A #FREE Course from Udemy.</p><p><strong>Question 14: Where does equals() and hashCode() method comes in the picture during the get() operation on HashMap?</strong>&nbsp;(<a href=\"https://javarevisited.blogspot.com/2017/08/top-10-java-concurrenthashmap-interview.html#axzz5ITbIGRsU\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>This core Java interview question is a follow-up of previous Java questions and the candidate should know that once you mention hashCode, people are most likely to ask, how they are used in HashMap.</p><p>When you provide a key object, first its hashcode method is called to calculate bucket location. Since a bucket may contain more than one entry as a linked list, each of those Map.Entry object is evaluated by using equals() method to see if they contain the actual key object or not.</p><p>I strongly suggest you read my post,&nbsp;<a href=\"http://javarevisited.blogspot.sg/2011/02/how-hashmap-works-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>How HashMap works in Java</strong></a>, another tale of an interview to learn more about this topic.</p><p><a href=\"http://bit.ly/2AHuthF\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Lc59H4PC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/1%2AP5LcQWTCtU8VMPkpaA77eQ.jpeg\"></a></p><p><strong>Questions 15: How do you avoid deadlock in Java?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.sg/2015/10/133-java-interview-questions-answers-from-last-5-years.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>If you know, a deadlock occurs when two threads try to access two resources that are held by each other, but to that happen the following four conditions need to match:</p><ol><li>Mutual exclusion\\ At least one process must be held in a non-sharable mode.</li><li>Hold and Wait\\ There must be a process holding one resource and waiting for another.</li><li>No preemption\\ resources cannot be preempted.</li><li>Circular Wait\\ There must exist a set of processes</li></ol><p>You can avoid deadlock by breaking the&nbsp;<em>circular wait condition</em>. In order to do that, you can make arrangements in the code to impose the&nbsp;<strong>ordering</strong>&nbsp;on acquisition and release of locks.</p><p>If the lock will be acquired in a consistent order and released in just the opposite order, there would not be a situation where one thread is holding a lock that is acquired by another and vice-versa.</p><p>You can further see my post,&nbsp;<a href=\"https://javarevisited.blogspot.com/2018/08/how-to-avoid-deadlock-in-java-threads.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>how to avoid deadlock in Java</strong></a>&nbsp;for the code example and a more detailed explanation.</p><p>I also recommend,&nbsp;<a href=\"https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjava-multithreading-concurrency-performance-optimization%2F\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Java Multithreading, Concurrency &amp; Performance Optimization</a>&nbsp;By Michael Pogrebinsky on Udemy for a better understanding of concurrency patterns for Java developers.</p><p><a href=\"https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjava-multithreading-concurrency-performance-optimization%2F\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nYrQW3jA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1000/1%2AWauLWDjUsj1CyO6dLmRDAA.gif\"></a></p><p><strong>Question 16: What is the difference between creating String as new() and literal?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.com/2012/10/10-java-string-interview-question-answers-top.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)</p><p>When we create a String object in Java with a new() Operator, it\'s created in&nbsp;<a href=\"https://javarevisited.blogspot.com/2011/05/java-heap-space-memory-size-jvm.html#axzz5SDsAfcC8\" target=\"_blank\" style=\"color: var(--link-branded-color);\">heap</a>&nbsp;and not added into string pool while String created using&nbsp;<a href=\"http://www.java67.com/2014/08/difference-between-string-literal-and-new-String-object-Java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">literal</a>&nbsp;are created in String pool itself which exists in PermGen area of heap.</p><p><code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">String str = new String(\"Test\")</code></p><p>does not put the object str in String pool, we need to call&nbsp;<a href=\"https://javarevisited.blogspot.com/2015/12/when-to-use-intern-method-of-string-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">String.intern()</a>&nbsp;method which is used to put them into String pool explicitly.</p><p>It\'s only when you create a String object as String literal e.g.&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">String s = \"Test\"</code>&nbsp;Java automatically puts that into String pool.</p><p>By the way, there is a catch here Since we are passing arguments as \"Test\", which is a String literal, it will also create another object as \"Test\" on&nbsp;<a href=\"http://javarevisited.blogspot.sg/2016/07/difference-in-string-pool-between-java6-java7.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">string pool</a>.</p><p>This is the one point, which has gone unnoticed until knowledgeable readers of&nbsp;<a href=\"http://javarevisited.blogspot.com/\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Javarevisited</a>&nbsp;blog suggested it. To learn more about the difference between a String literal and String object, see&nbsp;<a href=\"http://java67.blogspot.sg/2014/08/difference-between-string-literal-and-new-String-object-Java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">this</a>&nbsp;article.</p><p>Here is a nice image that shows this difference quite well:</p><p><a href=\"http://javarevisited.blogspot.sg/2013/07/java-string-tutorial-and-examples-beginners-programming.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--od-ta5p2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/1%2A4s5ZMfvuiIxI-4rBM_oubg.png\"></a></p><p><strong>Question 17: What is an Immutable Object? Can you write Immutable Class?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.in/2013/03/how-to-create-immutable-class-object-java-example-tutorial.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>Immutable classes are Java classes whose objects cannot be modified once created. Any modification in Immutable object results in the new object, for example,&nbsp;<a href=\"http://javarevisited.blogspot.sg/2010/10/why-string-is-immutable-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">String is immutable in Java</a>.</p><p>Mostly Immutable classes are also&nbsp;<a href=\"https://javarevisited.blogspot.com/2011/12/final-variable-method-class-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">final</a>&nbsp;in Java, in order to prevent subclasses from overriding methods, which can compromise Immutability.</p><p>You can achieve the same functionality by making member non-final but&nbsp;<a href=\"http://javarevisited.blogspot.sg/2012/10/difference-between-private-protected-public-package-access-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">private</a>&nbsp;and not modifying them except in the constructor.</p><p>Apart from the obvious, you also need to make sure that, you should not expose the internals of an Immutable object, especially if it contains a mutable member.</p><p>Similarly, when you accept the value for the mutable member from client like&nbsp;<code style=\"color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);\">java.util.Date</code>, use&nbsp;<a href=\"http://javarevisited.blogspot.sg/2013/09/how-clone-method-works-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">clone() method</a>&nbsp;keep a separate copy for yourself, to prevent the risk of malicious client modifying mutable reference after setting it.</p><p>The Same precaution needs to be taken while returning value for a mutable member, return another separate copy to the client, never return original reference held by Immutable class. You can also see my post&nbsp;<a href=\"http://javarevisited.blogspot.sg/2013/03/how-to-create-immutable-class-object-java-example-tutorial.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">How to create an Immutable class in Java</a>&nbsp;for step by step guide and code examples.</p><p><strong>Question 18: Give the simplest way to find out the time a method takes for execution without using any profiling tool?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.com/2012/10/10-java-string-interview-question-answers-top.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>Read the system time just before the method is invoked and immediately after the method returns. Take the time difference, which will give you the time taken by a method for execution.</p><p>Remember that if the time taken for execution is too small, it might show that it is taking zero milliseconds for execution. Try it on a method which is big enough, in the sense the one which is doing a considerable amount of processing</p><p><strong>Question 19: Which two method you need to implement to use any Object as a key in HashMap?</strong>&nbsp;(<a href=\"http://javarevisited.blogspot.com/2013/01/difference-between-identityhashmap-and-hashmap-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">answer</a>)\\</p><p>In order to use any object as Key in HashMap or Hashtable, it must implement&nbsp;<a href=\"http://www.java67.com/2012/11/difference-between-operator-and-equals-method-in.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">equals</a>&nbsp;and&nbsp;<a href=\"http://javarevisited.blogspot.sg/2015/01/why-override-equals-hashcode-or-tostring-java.html#axzz55oDxm8vv\" target=\"_blank\" style=\"color: var(--link-branded-color);\">hashcode</a>&nbsp;method in Java.</p><p>You can also read&nbsp;<a href=\"http://javarevisited.blogspot.sg/2011/02/how-hashmap-works-in-java.html\" target=\"_blank\" style=\"color: var(--link-branded-color);\">How HashMap works in Java</a>&nbsp;for a detailed explanation on how equals and hashcode method is used to put and get an object from HashMap.</p><p><strong>Question 20: How would you prevent a client from directly instantiating your concrete classes? For example, you have a Cache interface and two implementation classes MemoryCache and DiskCache, How do you ensure there is no object of these two classes is created by the client using a new() keyword.</strong>\\</p><p>I leave this question for you to practice and think about before I give the answer. I am sure you can figure out the right way to do this, as this is one of the important decisions to keep control of classes in your hand, great from a maintenance perspective.</p><p><strong>Further Learning</strong></p><ol><li><a href=\"https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;subid=0&amp;offerid=323058.1&amp;type=10&amp;tmpid=14538&amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fjava-the-complete-java-developer-course%2F\" target=\"_blank\" style=\"color: var(--link-branded-color);\">The Complete Java Masterclass</a></li><li><a href=\"https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fjava-fundamentals-language\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Java Fundamentals: The Java Language</a></li><li><a href=\"https://www.amazon.com/Core-Java-SE-Impatient-2nd/dp/0134694724?tag=javamysqlanta-20\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Core Java SE 9 for the Impatient</a></li><li><a href=\"http://bit.ly/2CupaSL\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>200+ Java Interview questions</strong></a></li><li><a href=\"https://www.educative.io/track/ace-java-coding-interview?affiliate_id=5073518643380224\" target=\"_blank\" style=\"color: var(--link-branded-color);\">Ace the Java Coding Interview</a></li></ol><h3>Closing Notes</h3><p>Great!!, you made it to the end of the article... Good luck with your Java Programming Interview! It\'s certainly not going to be easy, but by following these questions, you are one step closer to accomplishing your goal.</p><p>Please consider following me (<a href=\"https://twitter.com/javinpaul\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>javinpaul</strong></a>) on Medium if you\'d like to be notified on my new post, and don\'t forget to follow me on&nbsp;<a href=\"https://twitter.com/javinpaul\" target=\"_blank\" style=\"color: var(--link-branded-color);\"><strong>Twitter</strong></a><strong>!</strong></p>',1,'2022-05-06 08:17:45','2022-05-06 09:27:29',NULL);
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-05-07 15:17:55
